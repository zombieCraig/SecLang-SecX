#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


# generated by racc

require 'strscan'
require './SecLangCore'

class SecLang < Racc::Parser

module_eval(<<'...end SecLang.y/module_eval...', 'SecLang.y', 239)
  def initialize
    @syntax_check = false
    @s = SecLangCore.new
  end

  def check_syntax( str )
    @syntax_check = true
    res = parse(str)
    @syntax_check = false
    return res
  end

  def parse(str)
    @script = str
    state = :MAIN
    tokens = []
    last_state = []
    last_state.push state
    scanner = StringScanner.new(str)
    
    until scanner.eos?
      case
        when state == :MAIN
          case
            when m = scanner.scan(/puts/)
              tokens.push [:PUTSTOK, m]
            when m = scanner.scan(/print/)
              tokens.push [:PRINTTOK, m]
            when m = scanner.scan(/type/)
              tokens.push [:TYPETOK, m]
            when m = scanner.scan(/mode/)
              tokens.push [:GETMODETOK, m]
            when m = scanner.scan(/set_mode/)
              tokens.push [:SETMODETOK, m]
            when m = scanner.scan(/int/)
              tokens.push [:INTTOK, m]
            when m = scanner.scan(/hex/)
              tokens.push [:HEXTOK, m]
            when m = scanner.scan(/\(/)
              tokens.push [:LPAREN, m]
            when m = scanner.scan(/\)/)
              tokens.push [:RPAREN, m]
            when m = scanner.scan(/\"/)
              tokens.push [:QUOTE, m]
              last_state.push state
              state = :QUOTED 
            when m = scanner.scan(/\'/)
              tokens.push [:SINGLE_QUOTE, m]
              last_state.push state
              state = :SINGLE_QUOTED
            when m = scanner.scan(/,/)
              tokens.push [:COMMA, m]
            when m = scanner.scan(/==/)
              tokens.push [:EQ, m]
            when m = scanner.scan(/</)
              tokens.push [:LT, m]
            when m = scanner.scan(/>/)
              tokens.push [:GT, m]
            when m = scanner.scan(/>=/)
              tokens.push [:GE, m]
            when m = scanner.scan(/<=/)
              tokens.push [:LE, m]
            when m = scanner.scan(/!=/)
              tokens.push [:NE, m]
            when m = scanner.scan(/\|\|/)
              tokens.push [:ORTOK, m]
            when m = scanner.scan(/&&/)
              tokens.push [:ANDTOK, m]
            when m = scanner.scan(/=/)
              tokens.push [:EQUAL, m]
            when m = scanner.scan(/(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/)
              tokens.push [:IPV4ADDR, m]
            when m = scanner.scan(/0x[0-9a-fA-F]+/)
              tokens.push [:HEXVALUE, m]
            when m = scanner.scan(/\+=/)
              tokens.push [:VARINCAMT, m]
            when m = scanner.scan(/-=/)
              tokens.push [:VARDECAMT, m]
            when m = scanner.scan(/:[a-zA-Z][a-zA-Z0-9_-]*/)
              tokens.push [:SYMBOL, m]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*\-\-/)
              tokens.push [:VARDECTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*\+\+/)
              tokens.push [:VARINCTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*/)
              tokens.push [:VAR, m]
            when m = scanner.scan(/\d+/)
              tokens.push [:DIGITS, m]
            when m = scanner.scan(/\+/)
              tokens.push [:ADD, m]
            when m = scanner.scan(/\-/)
              tokens.push [:SUB, m]
            when m = scanner.scan(/;/)
              tokens.push [:SEMICOLON, m]
            when scanner.scan(/[ \t\r\n]/)
              # ignore whtiespace
            else
              puts "Syntax error around #{scanner.pos} #{scanner.rest}"
              return -1
          end
       when state == :QUOTED
         case
           when m = scanner.scan(/\"/)
             tokens.push [:QUOTE, m]
             state = last_state.pop
           when m = scanner.scan(/[^"]+/)
             tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when state == :SINGLE_QUOTED
         case
           when m = scanner.scan(/\'/)
             tokens.push [:SINGLE_QUOTE, m]
             state = last_state.pop
           when m = scanner.scan(/[^']+/)
             tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end

       end
    end
    tokens.push [false, false]

    if last_state.size > 1 then
      puts "Unclosed brackets (#{last_state.pop.to_s})"
      return -1
    end

    truth = yyparse(tokens, :each)
  end

  def on_error(error_token_id, error_value, value_stack)
    msg = "parse error "
    msg << "after #{value_stack.last} " if value_stack.length > 1
    msg << "on #{token_to_str(error_token_id)} #{error_value}"
    raise ParseError, msg
  end

...end SecLang.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    34,    35,    42,    43,    33,    36,    37,    38,    39,
    40,    41,    81,     5,     6,    10,    11,    12,    13,    14,
    22,    23,    24,    25,     2,    59,    26,    27,    46,    28,
    47,    48,    29,    46,    30,    47,    52,     5,     6,    10,
    11,    12,    13,    14,    22,    23,    24,    25,     2,    53,
    26,    27,    46,    28,    47,    79,    29,    80,    30,    71,
    72,     5,     6,    10,    11,    12,    13,    14,    22,    23,
    24,    25,     2,    51,    26,    27,    82,    28,    73,    74,
    29,    83,    30,    54,    55,     5,     6,    10,    11,    12,
    13,    14,    22,    23,    24,    25,     2,    88,    26,    27,
    89,    28,    90,    91,    29,    92,    30,    56,    57,     5,
     6,    10,    11,    12,    13,    14,    22,    23,    24,    25,
     2,    58,    26,    27,    31,    28,    97,    98,    29,   nil,
    30,   nil,   nil,     5,     6,    10,    11,    12,    13,    14,
    22,    23,    24,    25,     2,   nil,    26,    27,   nil,    28,
   nil,   nil,    29,   nil,    30,   nil,   nil,     5,     6,    10,
    11,    12,    13,    14,    22,    23,    24,    25,     2,   nil,
    26,    27,   nil,    28,   nil,   nil,    29,   nil,    30,   nil,
   nil,     5,     6,    10,    11,    12,    13,    14,    22,    23,
    24,    25,     2,   nil,    26,    27,   nil,    28,   nil,   nil,
    29,   nil,    30,   nil,   nil,     5,     6,    10,    11,    12,
    13,    14,    22,    23,    24,    25,     2,   nil,    26,    27,
   nil,    28,   nil,   nil,    29,   nil,    30,   nil,   nil,     5,
     6,    10,    11,    12,    13,    14,    22,    23,    24,    25,
     2,   nil,    26,    27,   nil,    28,   nil,   nil,    29,   nil,
    30,   nil,   nil,     5,     6,    10,    11,    12,    13,    14,
    22,    23,    24,    25,     2,   nil,    26,    27,   nil,    28,
   nil,   nil,    29,   nil,    30,   nil,   nil,     5,     6,    10,
    11,    12,    13,    14,    22,    23,    24,    25,     2,   nil,
    26,    27,   nil,    28,   nil,   nil,    29,   nil,    30,   nil,
   nil,     5,     6,    10,    11,    12,    13,    14,    22,    23,
    24,    25,     2,   nil,    26,    27,   nil,    28,   nil,   nil,
    29,   nil,    30,   nil,   nil,     5,     6,    10,    11,    12,
    13,    14,    22,    23,    24,    25,     2,   nil,    26,    27,
   nil,    28,   nil,   nil,    29,   nil,    30,   nil,   nil,     5,
     6,    10,    11,    12,    13,    14,    22,    23,    24,    25,
     2,   nil,    26,    27,   nil,    28,   nil,   nil,    29,   nil,
    30,   nil,   nil,     5,     6,    10,    11,    12,    13,    14,
    22,    23,    24,    25,     2,   nil,    26,    27,   nil,    28,
   nil,   nil,    29,   nil,    30,   nil,   nil,     5,     6,    10,
    11,    12,    13,    14,    22,    23,    24,    25,     2,   nil,
    26,    27,   nil,    28,   nil,   nil,    29,   nil,    30,   nil,
   nil,     5,     6,    10,    11,    12,    13,    14,    22,    23,
    24,    25,     2,   nil,    26,    27,   nil,    28,   nil,   nil,
    29,   nil,    30,   nil,   nil,     5,     6,    10,    11,    12,
    13,    14,    22,    23,    24,    25,     2,   nil,    26,    27,
   nil,    28,   nil,   nil,    29,   nil,    30,   nil,   nil,     5,
     6,    10,    11,    12,    13,    14,    22,    23,    24,    25,
   nil,   nil,    26,    27,   nil,    28,   nil,   nil,    29,   nil,
    30,    10,    76,    12,    13,    14,    22,    23,    24,    25,
   nil,   nil,    26,    27,   nil,    28,   nil,   nil,    29,   nil,
    30,    10,    76,    12,    13,    14,    22,    23,    24,    25,
   nil,   nil,    26,    27,   nil,    28,   nil,    50,    29,   nil,
    30,    22,    23,    24,    25,   nil,   nil,    26,    27,   nil,
    28,    84,    85,    86,    87 ]

racc_action_check = [
     0,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,    55,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    87,    32,     0,     0,    11,     0,
    11,    11,     0,    50,     0,    50,    23,    87,    87,    87,
    87,    87,    87,    87,    87,    87,    87,    87,     2,    24,
    87,    87,    76,    87,    76,    53,    87,    54,    87,    46,
    46,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    86,    22,     2,     2,    56,     2,    47,    47,
     2,    57,     2,    25,    26,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,     5,    77,    86,    86,
    78,    86,    79,    80,    86,    81,    86,    29,    30,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     6,    31,     5,     5,     1,     5,    91,    97,     5,   nil,
     5,   nil,   nil,     6,     6,     6,     6,     6,     6,     6,
     6,     6,     6,     6,    85,   nil,     6,     6,   nil,     6,
   nil,   nil,     6,   nil,     6,   nil,   nil,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    84,   nil,
    85,    85,   nil,    85,   nil,   nil,    85,   nil,    85,   nil,
   nil,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    48,   nil,    84,    84,   nil,    84,   nil,   nil,
    84,   nil,    84,   nil,   nil,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    43,   nil,    48,    48,
   nil,    48,   nil,   nil,    48,   nil,    48,   nil,   nil,    43,
    43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
    35,   nil,    43,    43,   nil,    43,   nil,   nil,    43,   nil,
    43,   nil,   nil,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    41,   nil,    35,    35,   nil,    35,
   nil,   nil,    35,   nil,    35,   nil,   nil,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    40,   nil,
    41,    41,   nil,    41,   nil,   nil,    41,   nil,    41,   nil,
   nil,    40,    40,    40,    40,    40,    40,    40,    40,    40,
    40,    40,    39,   nil,    40,    40,   nil,    40,   nil,   nil,
    40,   nil,    40,   nil,   nil,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    38,   nil,    39,    39,
   nil,    39,   nil,   nil,    39,   nil,    39,   nil,   nil,    38,
    38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
    37,   nil,    38,    38,   nil,    38,   nil,   nil,    38,   nil,
    38,   nil,   nil,    37,    37,    37,    37,    37,    37,    37,
    37,    37,    37,    37,    36,   nil,    37,    37,   nil,    37,
   nil,   nil,    37,   nil,    37,   nil,   nil,    36,    36,    36,
    36,    36,    36,    36,    36,    36,    36,    36,    33,   nil,
    36,    36,   nil,    36,   nil,   nil,    36,   nil,    36,   nil,
   nil,    33,    33,    33,    33,    33,    33,    33,    33,    33,
    33,    33,    34,   nil,    33,    33,   nil,    33,   nil,   nil,
    33,   nil,    33,   nil,   nil,    34,    34,    34,    34,    34,
    34,    34,    34,    34,    34,    34,    42,   nil,    34,    34,
   nil,    34,   nil,   nil,    34,   nil,    34,   nil,   nil,    42,
    42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
   nil,   nil,    42,    42,   nil,    42,   nil,   nil,    42,   nil,
    42,    51,    51,    51,    51,    51,    51,    51,    51,    51,
   nil,   nil,    51,    51,   nil,    51,   nil,   nil,    51,   nil,
    51,    52,    52,    52,    52,    52,    52,    52,    52,    52,
   nil,   nil,    52,    52,   nil,    52,   nil,    14,    52,   nil,
    52,    14,    14,    14,    14,   nil,   nil,    14,    14,   nil,
    14,    59,    59,    59,    59 ]

racc_action_pointer = [
    -2,   124,    46,   nil,    -3,    94,   118,   nil,   nil,   nil,
   nil,    -2,   nil,   nil,   509,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    71,    34,    47,    81,    82,   nil,   nil,    72,
    73,   121,    22,   406,   430,   238,   382,   358,   334,   310,
   286,   262,   454,   214,   nil,   nil,    42,    61,   190,   nil,
     3,   474,   494,    37,    39,    -6,    42,    45,   nil,   537,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,    94,    97,    99,
    77,   102,   nil,   nil,   166,   142,    70,    22,   nil,   nil,
   nil,    99,   nil,   nil,   nil,   nil,   nil,   124,   nil ]

racc_action_default = [
    -1,   -50,    -1,    -6,   -20,    -1,    -1,   -21,   -22,   -23,
   -24,   -25,   -26,   -27,   -50,   -29,   -30,   -31,   -32,   -33,
   -34,   -35,   -50,   -50,   -50,   -50,   -50,   -41,   -44,   -50,
   -50,   -50,   -50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   -18,   -19,   -50,   -50,    -1,   -28,
   -50,   -50,   -50,   -50,   -50,   -50,   -50,   -50,    99,   -50,
    -7,    -8,    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -16,
   -17,   -42,   -43,   -45,   -46,   -47,   -25,   -50,   -50,   -50,
   -50,   -50,   -48,   -49,    -1,    -1,    -1,    -1,   -36,   -37,
   -38,   -50,   -40,    -2,    -3,    -4,    -5,   -50,   -39 ]

racc_goto_table = [
     1,    49,    32,    77,    78,    44,    45,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,   nil,   nil,   nil,   nil,    75,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    93,    94,    95,    96 ]

racc_goto_check = [
     1,     4,     1,     3,     3,     1,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,   nil,   nil,   nil,   nil,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     1,     1,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   -48,   -13,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     3,     4,     7,     8,     9,    15,    16,    17,
    18,    19,    20,    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 38, :_reduce_1,
  5, 38, :_reduce_2,
  5, 38, :_reduce_3,
  5, 38, :_reduce_4,
  5, 38, :_reduce_5,
  1, 38, :_reduce_none,
  3, 38, :_reduce_none,
  3, 38, :_reduce_8,
  3, 38, :_reduce_9,
  3, 38, :_reduce_10,
  3, 38, :_reduce_11,
  3, 38, :_reduce_12,
  3, 38, :_reduce_13,
  3, 38, :_reduce_14,
  3, 38, :_reduce_15,
  3, 38, :_reduce_16,
  3, 38, :_reduce_17,
  2, 38, :_reduce_18,
  2, 38, :_reduce_19,
  1, 38, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_23,
  1, 40, :_reduce_24,
  1, 40, :_reduce_25,
  1, 40, :_reduce_26,
  1, 40, :_reduce_27,
  2, 42, :_reduce_28,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  4, 47, :_reduce_36,
  4, 48, :_reduce_37,
  4, 44, :_reduce_38,
  6, 46, :_reduce_39,
  4, 45, :_reduce_40,
  1, 49, :_reduce_41,
  3, 49, :_reduce_42,
  3, 49, :_reduce_43,
  1, 50, :_reduce_44,
  3, 50, :_reduce_45,
  3, 50, :_reduce_46,
  3, 39, :_reduce_47,
  3, 43, :_reduce_48,
  3, 43, :_reduce_49 ]

racc_reduce_n = 50

racc_shift_n = 99

racc_token_table = {
  false => 0,
  :error => 1,
  :LPAREN => 2,
  :RPAREN => 3,
  :ANDTOK => 4,
  :ORTOK => 5,
  :ADD => 6,
  :SUB => 7,
  :SEMICOLON => 8,
  :EQ => 9,
  :GT => 10,
  :LT => 11,
  :LE => 12,
  :GE => 13,
  :NE => 14,
  :PUTSTOK => 15,
  :PRINTTOK => 16,
  :DIGITS => 17,
  :VAR => 18,
  :HEXVALUE => 19,
  :IPV4ADDR => 20,
  :NOTTOK => 21,
  :INTTOK => 22,
  :HEXTOK => 23,
  :TYPETOK => 24,
  :SETMODETOK => 25,
  :COMMA => 26,
  :SYMBOL => 27,
  :GETMODETOK => 28,
  :VARDECTOK => 29,
  :VARDECAMT => 30,
  :VARINCTOK => 31,
  :VARINCAMT => 32,
  :EQUAL => 33,
  :QUOTE => 34,
  :DATA => 35,
  :SINGLE_QUOTE => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LPAREN",
  "RPAREN",
  "ANDTOK",
  "ORTOK",
  "ADD",
  "SUB",
  "SEMICOLON",
  "EQ",
  "GT",
  "LT",
  "LE",
  "GE",
  "NE",
  "PUTSTOK",
  "PRINTTOK",
  "DIGITS",
  "VAR",
  "HEXVALUE",
  "IPV4ADDR",
  "NOTTOK",
  "INTTOK",
  "HEXTOK",
  "TYPETOK",
  "SETMODETOK",
  "COMMA",
  "SYMBOL",
  "GETMODETOK",
  "VARDECTOK",
  "VARDECAMT",
  "VARINCTOK",
  "VARINCAMT",
  "EQUAL",
  "QUOTE",
  "DATA",
  "SINGLE_QUOTE",
  "$start",
  "commands",
  "variable_assignment",
  "truth_stmt",
  "command",
  "not_command",
  "quotedtext",
  "type_cmd",
  "get_mode_cmd",
  "set_mode_cmd",
  "int_cmd",
  "hex_cmd",
  "vardec_cmd",
  "varinc_cmd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'SecLang.y', 5)
  def _reduce_1(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 8)
  def _reduce_2(val, _values, result)
                 result = val[1] && val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 12)
  def _reduce_3(val, _values, result)
                 result = val[1] || val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 16)
  def _reduce_4(val, _values, result)
                 result = @s.var_add_var(val[1], val[4])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 20)
  def _reduce_5(val, _values, result)
                 result = @s.var_sub_var(val[1], val[4])
           
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'SecLang.y', 26)
  def _reduce_8(val, _values, result)
                 result = val[0] && val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 30)
  def _reduce_9(val, _values, result)
                 result = val[0] || val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 35)
  def _reduce_10(val, _values, result)
                 result = @s.is_eq?(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 40)
  def _reduce_11(val, _values, result)
                 result = val[0] > val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 45)
  def _reduce_12(val, _values, result)
                 result = val[0] < val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 50)
  def _reduce_13(val, _values, result)
                 result = val[0] <= val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 55)
  def _reduce_14(val, _values, result)
                 result = val[0] >= val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 60)
  def _reduce_15(val, _values, result)
                 result = val[0] != val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 65)
  def _reduce_16(val, _values, result)
                 result = @s.var_add_var(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 70)
  def _reduce_17(val, _values, result)
                 result = @s.var_sub_var(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 75)
  def _reduce_18(val, _values, result)
                 result = puts val[1]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 80)
  def _reduce_19(val, _values, result)
                 result = print val[1]
           
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'SecLang.y', 92)
  def _reduce_23(val, _values, result)
    		result = StringVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 97)
  def _reduce_24(val, _values, result)
    		result = IntVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 102)
  def _reduce_25(val, _values, result)
                    result = @s.get_var(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 107)
  def _reduce_26(val, _values, result)
    		result = HexVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 112)
  def _reduce_27(val, _values, result)
    		result = IPv4Var.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 119)
  def _reduce_28(val, _values, result)
                      result = val[1] ? false : true
           
    result
  end
.,.,

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'SecLang.y', 144)
  def _reduce_36(val, _values, result)
    		result = @s.int(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 151)
  def _reduce_37(val, _values, result)
    		result = @s.hex(val[2])
         
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 158)
  def _reduce_38(val, _values, result)
    		result = @s.var_type(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 165)
  def _reduce_39(val, _values, result)
    		result = @s.var_set_mode(val[2], val[4])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 172)
  def _reduce_40(val, _values, result)
    		result = @s.var_get_mode(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 179)
  def _reduce_41(val, _values, result)
    		result = @s.var_dec(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 184)
  def _reduce_42(val, _values, result)
    		result = @s.var_dec(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 189)
  def _reduce_43(val, _values, result)
                 	result = @s.var_dec_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 196)
  def _reduce_44(val, _values, result)
    		result = @s.var_inc(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 201)
  def _reduce_45(val, _values, result)
    		result = @s.var_inc(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 206)
  def _reduce_46(val, _values, result)
                 	result = @s.var_inc_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 213)
  def _reduce_47(val, _values, result)
    		result = @s.add_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 220)
  def _reduce_48(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 224)
  def _reduce_49(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SecLang


