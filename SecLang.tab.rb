#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


# generated by racc

require 'strscan'
require "./SecVar"

class SecLang < Racc::Parser

module_eval(<<'...end SecLang.y/module_eval...', 'SecLang.y', 132)
  def initialize
    @syntax_check = false
    @var = {}
  end

  def check_syntax( str )
    @syntax_check = true
    res = parse(str)
    @syntax_check = false
    return res
  end

  def parse(str)
    @script = str
    state = :MAIN
    tokens = []
    last_state = []
    last_state.push state
    scanner = StringScanner.new(str)
    
    until scanner.eos?
      case
        when state == :MAIN
          case
            when m = scanner.scan(/puts/)
              tokens.push [:PUTSTOK, m]
            when m = scanner.scan(/print/)
              tokens.push [:PRINTTOK, m]
            when m = scanner.scan(/type/)
              tokens.push [:TYPETOK, m]
            when m = scanner.scan(/\(/)
              tokens.push [:LPAREN, m]
            when m = scanner.scan(/\)/)
              tokens.push [:RPAREN, m]
            when m = scanner.scan(/\"/)
              tokens.push [:QUOTE, m]
              last_state.push state
              state = :QUOTED 
            when m = scanner.scan(/\'/)
              tokens.push [:SINGLE_QUOTE, m]
              last_state.push state
              state = :SINGLE_QUOTED
            when m = scanner.scan(/=/)
              tokens.push [:EQUAL, m]
            when m = scanner.scan(/,/)
              tokens.push [:COMMA, m]
            when m = scanner.scan(/\|\|/)
              tokens.push [:ORTOK, m]
            when m = scanner.scan(/&&/)
              tokens.push [:ANDTOK, m]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_-]*/)
              tokens.push [:VAR, m]
            when m = scanner.scan(/\d+/)
              tokens.push [:DIGITS, m]
            when scanner.scan(/[ \t\r\n]/)
              # ignore whtiespace
            else
              puts "Syntax error around #{scanner.pos} #{scanner.rest}"
              return -1
          end
       when state == :QUOTED
         case
           when m = scanner.scan(/\"/)
             tokens.push [:QUOTE, m]
             state = last_state.pop
           when m = scanner.scan(/[^"]+/)
             tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when state == :SINGLE_QUOTED
         case
           when m = scanner.scan(/\'/)
             tokens.push [:SINGLE_QUOTE, m]
             state = last_state.pop
           when m = scanner.scan(/[^']+/)
             tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end

       end
    end
    tokens.push [false, false]

    if last_state.size > 1 then
      puts "Unclosed brackets (#{last_state.pop.to_s})"
      return -1
    end

    truth = yyparse(tokens, :each)
  end

  def on_error(error_token_id, error_value, value_stack)
    msg = "parse error "
    msg << "after #{value_stack.last} " if value_stack.length > 1
    msg << "on #{token_to_str(error_token_id)} #{error_value}"
    raise ParseError, msg
  end

  def add_var(name, var)
    @var[name] = var
  end

  def var_value(name)
    @var[name].value
  end

  def var_type(name)
    @var[name].type.to_s
  end

...end SecLang.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    17,    18,    30,     6,    11,     2,    14,    12,    13,
     6,    11,     2,    14,    12,    13,     6,    11,     2,    14,
    12,    13,     6,    11,     2,    14,    12,    13,     6,    11,
     2,    14,    12,    13,     6,    11,    32,    14,    12,    13,
    11,    22,    23,    12,    13,    35,    24,    36,    25,    11,
    28,    14,    12,    13,    39,    24,    38,    25,    31,    24,
    11,    25,    14,    12,    13,    41,    42,    30,    43,    44,
    45,    46,    29,    15,    49 ]

racc_action_check = [
     0,     3,     3,    23,     0,     0,    42,     0,     0,     0,
    42,    42,     2,    42,    42,    42,     2,     2,    18,     2,
     2,     2,    18,    18,    41,    18,    18,    18,    41,    41,
    17,    41,    41,    41,    17,    17,    16,    17,    17,    17,
    11,    11,    11,    11,    11,    24,    11,    25,    11,    12,
    12,    12,    12,    12,    30,    12,    29,    12,    15,    30,
     6,    30,     6,     6,     6,    32,    32,    14,    35,    36,
    37,    38,    13,     1,    45 ]

racc_action_pointer = [
    -2,    73,    10,    -3,   nil,   nil,    53,   nil,   nil,   nil,
   nil,    33,    42,    70,    55,    58,    33,    28,    16,   nil,
   nil,   nil,   nil,    -9,    31,    33,   nil,   nil,   nil,    47,
    46,   nil,    61,   nil,   nil,    55,    54,    60,    68,   nil,
   nil,    22,     4,   nil,   nil,    65,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -27,    -1,    -6,    -7,    -8,   -27,   -10,   -11,   -12,
   -13,   -27,   -27,   -27,   -27,   -27,   -27,    -1,    -1,    -9,
   -14,   -15,   -16,   -17,   -27,   -27,   -18,   -19,   -20,   -27,
   -27,    50,   -27,    -4,    -5,   -27,   -27,   -27,   -27,   -23,
   -24,    -1,    -1,   -25,   -26,   -27,   -22,    -2,    -3,   -21 ]

racc_goto_table = [
     1,    19,    16,    21,    27,    37,    20,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,    34,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48 ]

racc_goto_check = [
     1,     3,     1,     9,     9,    10,     3,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,     1,   nil,
   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,    -5,   nil,   nil,   nil,   nil,   nil,    -8,
   -23 ]

racc_goto_default = [
   nil,   nil,     3,     4,     5,     7,     8,     9,    10,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 17, :_reduce_1,
  5, 17, :_reduce_2,
  5, 17, :_reduce_3,
  3, 17, :_reduce_4,
  3, 17, :_reduce_5,
  1, 17, :_reduce_none,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  2, 20, :_reduce_9,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  2, 21, :_reduce_14,
  2, 21, :_reduce_15,
  2, 21, :_reduce_16,
  2, 21, :_reduce_17,
  2, 22, :_reduce_18,
  2, 22, :_reduce_19,
  0, 26, :_reduce_20,
  5, 22, :_reduce_21,
  4, 23, :_reduce_22,
  3, 24, :_reduce_23,
  3, 24, :_reduce_24,
  3, 25, :_reduce_25,
  3, 25, :_reduce_26 ]

racc_reduce_n = 27

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  :LPAREN => 2,
  :RPAREN => 3,
  :ANDTOK => 4,
  :ORTOK => 5,
  :NOTTOK => 6,
  :PUTSTOK => 7,
  :DIGITS => 8,
  :VAR => 9,
  :PRINTTOK => 10,
  :TYPETOK => 11,
  :EQUAL => 12,
  :QUOTE => 13,
  :DATA => 14,
  :SINGLE_QUOTE => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LPAREN",
  "RPAREN",
  "ANDTOK",
  "ORTOK",
  "NOTTOK",
  "PUTSTOK",
  "DIGITS",
  "VAR",
  "PRINTTOK",
  "TYPETOK",
  "EQUAL",
  "QUOTE",
  "DATA",
  "SINGLE_QUOTE",
  "$start",
  "commands",
  "truth_stmt",
  "command",
  "not_command",
  "puts_cmd",
  "print_cmd",
  "type_cmd",
  "variable_assignment",
  "quotedtext",
  "@1" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'SecLang.y', 5)
  def _reduce_1(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 8)
  def _reduce_2(val, _values, result)
                 result = val[1] && val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 12)
  def _reduce_3(val, _values, result)
                 result = val[1] || val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 16)
  def _reduce_4(val, _values, result)
                 result = val[0] && val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 20)
  def _reduce_5(val, _values, result)
                 result = val[0] || val[2]
           
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'SecLang.y', 34)
  def _reduce_9(val, _values, result)
                      result = val[1] ? false : true
           
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'SecLang.y', 51)
  def _reduce_14(val, _values, result)
    		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 56)
  def _reduce_15(val, _values, result)
     		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 61)
  def _reduce_16(val, _values, result)
    		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 66)
  def _reduce_17(val, _values, result)
    		result = puts(var_value(val[1]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 73)
  def _reduce_18(val, _values, result)
    		result = print(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 78)
  def _reduce_19(val, _values, result)
    		result = print(val[1])
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 83)
  def _reduce_20(val, _values, result)
    		result = print(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 87)
  def _reduce_21(val, _values, result)
    		result = print(var_value(val[1]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 94)
  def _reduce_22(val, _values, result)
    		result = var_type(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 101)
  def _reduce_23(val, _values, result)
    		result = add_var(val[0], IntVar.new(val[2]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 106)
  def _reduce_24(val, _values, result)
    		result = add_var(val[0], StringVar.new(val[2]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 113)
  def _reduce_25(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 117)
  def _reduce_26(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SecLang


