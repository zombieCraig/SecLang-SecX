#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


# generated by racc

require 'strscan'
require "./SecVar"

class SecLang < Racc::Parser

module_eval(<<'...end SecLang.y/module_eval...', 'SecLang.y', 159)
  def initialize
    @syntax_check = false
    @var = {}
  end

  def check_syntax( str )
    @syntax_check = true
    res = parse(str)
    @syntax_check = false
    return res
  end

  def parse(str)
    @script = str
    state = :MAIN
    tokens = []
    last_state = []
    last_state.push state
    scanner = StringScanner.new(str)
    
    until scanner.eos?
      case
        when state == :MAIN
          case
            when m = scanner.scan(/puts/)
              tokens.push [:PUTSTOK, m]
            when m = scanner.scan(/print/)
              tokens.push [:PRINTTOK, m]
            when m = scanner.scan(/type/)
              tokens.push [:TYPETOK, m]
            when m = scanner.scan(/mode/)
              tokens.push [:GETMODETOK, m]
            when m = scanner.scan(/set_mode/)
              tokens.push [:SETMODETOK, m]
            when m = scanner.scan(/\(/)
              tokens.push [:LPAREN, m]
            when m = scanner.scan(/\)/)
              tokens.push [:RPAREN, m]
            when m = scanner.scan(/\"/)
              tokens.push [:QUOTE, m]
              last_state.push state
              state = :QUOTED 
            when m = scanner.scan(/\'/)
              tokens.push [:SINGLE_QUOTE, m]
              last_state.push state
              state = :SINGLE_QUOTED
            when m = scanner.scan(/=/)
              tokens.push [:EQUAL, m]
            when m = scanner.scan(/,/)
              tokens.push [:COMMA, m]
            when m = scanner.scan(/\|\|/)
              tokens.push [:ORTOK, m]
            when m = scanner.scan(/&&/)
              tokens.push [:ANDTOK, m]
            when m = scanner.scan(/:[a-zA-Z][a-zA-Z0-9_-]*/)
              tokens.push [:SYMBOL, m]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_-]*\+\+/)
              tokens.push [:VARINCTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_-]*/)
              tokens.push [:VAR, m]
            when m = scanner.scan(/\d+/)
              tokens.push [:DIGITS, m]
            when scanner.scan(/[ \t\r\n]/)
              # ignore whtiespace
            else
              puts "Syntax error around #{scanner.pos} #{scanner.rest}"
              return -1
          end
       when state == :QUOTED
         case
           when m = scanner.scan(/\"/)
             tokens.push [:QUOTE, m]
             state = last_state.pop
           when m = scanner.scan(/[^"]+/)
             tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when state == :SINGLE_QUOTED
         case
           when m = scanner.scan(/\'/)
             tokens.push [:SINGLE_QUOTE, m]
             state = last_state.pop
           when m = scanner.scan(/[^']+/)
             tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end

       end
    end
    tokens.push [false, false]

    if last_state.size > 1 then
      puts "Unclosed brackets (#{last_state.pop.to_s})"
      return -1
    end

    truth = yyparse(tokens, :each)
  end

  def on_error(error_token_id, error_value, value_stack)
    msg = "parse error "
    msg << "after #{value_stack.last} " if value_stack.length > 1
    msg << "on #{token_to_str(error_token_id)} #{error_value}"
    raise ParseError, msg
  end

  def add_var(name, var)
    @var[name] = var
  end

  def var_value(name)
    if @var.has_key? name
      @var[name].value
    else
     raise ParseError, "#{name} not assigned"
    end
  end

  def var_type(name)
    @var[name].type.to_s
  end

  def var_inc(name)
    name = name.gsub(/\+\+$/, "")
    if @var.has_key? name then
      @var[name].inc
    else
      raise ParseError, "#{name} not assigned"
    end
    @var[name].value
  end

  def var_get_mode(name)
    if not @var.has_key? name then
      raise ParseError, "#{name} not assigned"
    end
    @var[name].mode
  end

  def var_set_mode(name, mode)
    if @var.has_key? name then
      @var[name].set_mode mode
    else
      raise ParseError, "#{name} not assigned"
    end
    @var[name].mode
  end

...end SecLang.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    23,    24,    44,     6,    14,    39,    20,    15,    16,
    17,     2,    38,    18,    19,     6,    14,    38,    20,    15,
    16,    17,     2,    43,    18,    19,     6,    14,    40,    20,
    15,    16,    17,     2,    46,    18,    19,     6,    14,    47,
    20,    15,    16,    17,     2,    48,    18,    19,     6,    14,
    37,    20,    15,    16,    17,     2,    36,    18,    19,     6,
    14,    53,    20,    15,    16,    17,    51,    52,    18,    19,
    14,    28,    29,    15,    16,    17,    54,    55,    18,    19,
    56,    30,    57,    31,    14,    34,    20,    15,    16,    17,
    49,    58,    18,    19,    35,    30,    21,    31,    61,    62,
    30,    14,    31,    20,    15,    16,    17,    63,   nil,    18,
    19 ]

racc_action_check = [
     0,     3,     3,    31,     0,     0,    21,     0,     0,     0,
     0,    52,    20,     0,     0,    52,    52,    29,    52,    52,
    52,    52,     2,    30,    52,    52,     2,     2,    22,     2,
     2,     2,     2,    24,    35,     2,     2,    24,    24,    36,
    24,    24,    24,    24,    51,    37,    24,    24,    51,    51,
    18,    51,    51,    51,    51,    23,    17,    51,    51,    23,
    23,    43,    23,    23,    23,    23,    40,    40,    23,    23,
    14,    14,    14,    14,    14,    14,    44,    45,    14,    14,
    46,    14,    47,    14,    15,    15,    15,    15,    15,    15,
    38,    48,    15,    15,    16,    15,     1,    15,    55,    57,
    38,     6,    38,     6,     6,     6,     6,    62,   nil,     6,
     6 ]

racc_action_pointer = [
    -2,    96,    20,    -3,   nil,   nil,    94,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    63,    77,    92,    54,    48,   nil,
    -5,     6,    25,    53,    31,   nil,   nil,   nil,   nil,     0,
     4,   -16,   nil,   nil,   nil,    25,    30,    36,    82,   nil,
    62,   nil,   nil,    43,    56,    67,    77,    69,    88,   nil,
   nil,    42,     9,   nil,   nil,    89,   nil,    85,   nil,   nil,
   nil,   nil,   104,   nil ]

racc_action_default = [
    -1,   -33,    -1,    -6,    -7,    -8,   -33,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -33,   -33,   -33,   -33,   -33,   -28,
   -33,   -33,   -33,    -1,    -1,    -9,   -17,   -18,   -19,   -20,
   -33,   -33,   -21,   -22,   -23,   -33,   -33,   -33,   -33,    64,
   -33,    -4,    -5,   -33,   -33,   -33,   -33,   -33,   -33,   -29,
   -30,    -1,    -1,   -31,   -32,   -33,   -25,   -33,   -27,    -2,
    -3,   -24,   -33,   -26 ]

racc_goto_table = [
     1,    25,    22,    27,    33,    45,   nil,   nil,   nil,    26,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    41,    42,   nil,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    59,    60 ]

racc_goto_check = [
     1,     3,     1,    12,    12,    13,   nil,   nil,   nil,     3,
     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     1,     1,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,    -5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -11,   -29 ]

racc_goto_default = [
   nil,   nil,     3,     4,     5,     7,     8,     9,    10,    11,
    12,    13,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 22, :_reduce_1,
  5, 22, :_reduce_2,
  5, 22, :_reduce_3,
  3, 22, :_reduce_4,
  3, 22, :_reduce_5,
  1, 22, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  2, 25, :_reduce_9,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  2, 26, :_reduce_17,
  2, 26, :_reduce_18,
  2, 26, :_reduce_19,
  2, 26, :_reduce_20,
  2, 27, :_reduce_21,
  2, 27, :_reduce_22,
  0, 34, :_reduce_23,
  5, 27, :_reduce_24,
  4, 28, :_reduce_25,
  6, 30, :_reduce_26,
  4, 29, :_reduce_27,
  1, 31, :_reduce_28,
  3, 32, :_reduce_29,
  3, 32, :_reduce_30,
  3, 33, :_reduce_31,
  3, 33, :_reduce_32 ]

racc_reduce_n = 33

racc_shift_n = 64

racc_token_table = {
  false => 0,
  :error => 1,
  :LPAREN => 2,
  :RPAREN => 3,
  :ANDTOK => 4,
  :ORTOK => 5,
  :NOTTOK => 6,
  :PUTSTOK => 7,
  :DIGITS => 8,
  :VAR => 9,
  :PRINTTOK => 10,
  :TYPETOK => 11,
  :SETMODETOK => 12,
  :COMMA => 13,
  :SYMBOL => 14,
  :GETMODETOK => 15,
  :VARINCTOK => 16,
  :EQUAL => 17,
  :QUOTE => 18,
  :DATA => 19,
  :SINGLE_QUOTE => 20 }

racc_nt_base = 21

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LPAREN",
  "RPAREN",
  "ANDTOK",
  "ORTOK",
  "NOTTOK",
  "PUTSTOK",
  "DIGITS",
  "VAR",
  "PRINTTOK",
  "TYPETOK",
  "SETMODETOK",
  "COMMA",
  "SYMBOL",
  "GETMODETOK",
  "VARINCTOK",
  "EQUAL",
  "QUOTE",
  "DATA",
  "SINGLE_QUOTE",
  "$start",
  "commands",
  "truth_stmt",
  "command",
  "not_command",
  "puts_cmd",
  "print_cmd",
  "type_cmd",
  "get_mode_cmd",
  "set_mode_cmd",
  "varinc_cmd",
  "variable_assignment",
  "quotedtext",
  "@1" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'SecLang.y', 5)
  def _reduce_1(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 8)
  def _reduce_2(val, _values, result)
                 result = val[1] && val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 12)
  def _reduce_3(val, _values, result)
                 result = val[1] || val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 16)
  def _reduce_4(val, _values, result)
                 result = val[0] && val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 20)
  def _reduce_5(val, _values, result)
                 result = val[0] || val[2]
           
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'SecLang.y', 34)
  def _reduce_9(val, _values, result)
                      result = val[1] ? false : true
           
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'SecLang.y', 57)
  def _reduce_17(val, _values, result)
    		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 62)
  def _reduce_18(val, _values, result)
     		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 67)
  def _reduce_19(val, _values, result)
    		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 72)
  def _reduce_20(val, _values, result)
    		result = puts(var_value(val[1]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 79)
  def _reduce_21(val, _values, result)
    		result = print(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 84)
  def _reduce_22(val, _values, result)
    		result = print(val[1])
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 89)
  def _reduce_23(val, _values, result)
    		result = print(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 93)
  def _reduce_24(val, _values, result)
    		result = print(var_value(val[1]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 100)
  def _reduce_25(val, _values, result)
    		result = var_type(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 107)
  def _reduce_26(val, _values, result)
    		result = var_set_mode(val[2], val[4])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 114)
  def _reduce_27(val, _values, result)
    		result = var_get_mode(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 121)
  def _reduce_28(val, _values, result)
    		result = var_inc(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 128)
  def _reduce_29(val, _values, result)
    		result = add_var(val[0], IntVar.new(val[2]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 133)
  def _reduce_30(val, _values, result)
    		result = add_var(val[0], StringVar.new(val[2]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 140)
  def _reduce_31(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 144)
  def _reduce_32(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SecLang


