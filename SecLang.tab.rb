#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


# generated by racc

require 'strscan'
require './SecLangCore'

class SecLang < Racc::Parser

module_eval(<<'...end SecLang.y/module_eval...', 'SecLang.y', 301)
  def initialize
    @syntax_check = false
    @s = SecLangCore.new
  end

  def check_syntax( str )
    @syntax_check = true
    res = parse(str)
    @syntax_check = false
    return res
  end

  def parse(str)
    @script = str
    state = :MAIN
    tokens = []
    last_state = []
    last_state.push state
    scanner = StringScanner.new(str)
    
    until scanner.eos?
      case
        when state == :MAIN
          case
            when m = scanner.scan(/puts/)
              tokens.push [:PUTSTOK, m]
            when m = scanner.scan(/print/)
              tokens.push [:PRINTTOK, m]
            when m = scanner.scan(/type/)
              tokens.push [:TYPETOK, m]
            when m = scanner.scan(/mode/)
              tokens.push [:GETMODETOK, m]
            when m = scanner.scan(/set_mode/)
              tokens.push [:SETMODETOK, m]
            when m = scanner.scan(/\(/)
              tokens.push [:LPAREN, m]
            when m = scanner.scan(/\)/)
              tokens.push [:RPAREN, m]
            when m = scanner.scan(/\"/)
              tokens.push [:QUOTE, m]
              last_state.push state
              state = :QUOTED 
            when m = scanner.scan(/\'/)
              tokens.push [:SINGLE_QUOTE, m]
              last_state.push state
              state = :SINGLE_QUOTED
            when m = scanner.scan(/,/)
              tokens.push [:COMMA, m]
            when m = scanner.scan(/==/)
              tokens.push [:EQ, m]
            when m = scanner.scan(/</)
              tokens.push [:LT, m]
            when m = scanner.scan(/>/)
              tokens.push [:GT, m]
            when m = scanner.scan(/>=/)
              tokens.push [:GE, m]
            when m = scanner.scan(/<=/)
              tokens.push [:LE, m]
            when m = scanner.scan(/!=/)
              tokens.push [:NE, m]
            when m = scanner.scan(/\|\|/)
              tokens.push [:ORTOK, m]
            when m = scanner.scan(/&&/)
              tokens.push [:ANDTOK, m]
            when m = scanner.scan(/=/)
              tokens.push [:EQUAL, m]
            when m = scanner.scan(/(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/)
              tokens.push [:IPV4ADDR, m]
            when m = scanner.scan(/0x[0-9a-fA-F]+/)
              tokens.push [:HEXVALUE, m]
            when m = scanner.scan(/\+=/)
              tokens.push [:VARINCAMT, m]
            when m = scanner.scan(/-=/)
              tokens.push [:VARDECAMT, m]
            when m = scanner.scan(/:[a-zA-Z][a-zA-Z0-9_-]*/)
              tokens.push [:SYMBOL, m]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*\-\-/)
              tokens.push [:VARDECTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*\+\+/)
              tokens.push [:VARINCTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*/)
              tokens.push [:VAR, m]
            when m = scanner.scan(/\d+/)
              tokens.push [:DIGITS, m]
            when m = scanner.scan(/\+/)
              tokens.push [:ADD, m]
            when m = scanner.scan(/\-/)
              tokens.push [:SUB, m]
            when m = scanner.scan(/;/)
              tokens.push [:SEMICOLON, m]
            when scanner.scan(/[ \t\r\n]/)
              # ignore whtiespace
            else
              puts "Syntax error around #{scanner.pos} #{scanner.rest}"
              return -1
          end
       when state == :QUOTED
         case
           when m = scanner.scan(/\"/)
             tokens.push [:QUOTE, m]
             state = last_state.pop
           when m = scanner.scan(/[^"]+/)
             tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when state == :SINGLE_QUOTED
         case
           when m = scanner.scan(/\'/)
             tokens.push [:SINGLE_QUOTE, m]
             state = last_state.pop
           when m = scanner.scan(/[^']+/)
             tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end

       end
    end
    tokens.push [false, false]

    if last_state.size > 1 then
      puts "Unclosed brackets (#{last_state.pop.to_s})"
      return -1
    end

    truth = yyparse(tokens, :each)
  end

  def on_error(error_token_id, error_value, value_stack)
    msg = "parse error "
    msg << "after #{value_stack.last} " if value_stack.length > 1
    msg << "on #{token_to_str(error_token_id)} #{error_value}"
    raise ParseError, msg
  end

...end SecLang.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    32,    33,    40,    41,    31,    34,    35,    36,    37,
    38,    39,    61,     7,     8,     9,    10,    11,    20,    21,
    22,    23,     2,    86,    24,    25,    42,    26,    43,    44,
    27,    42,    28,    43,    44,     7,     8,     9,    10,    11,
    20,    21,    22,    23,     2,    87,    24,    25,    42,    26,
    43,    44,    27,    42,    28,    43,    44,     7,     8,     9,
    10,    11,    20,    21,    22,    23,    83,    88,    24,    25,
    89,    26,    75,    76,    27,    90,    28,    73,    74,    79,
    77,    82,    81,    60,    20,    21,    22,    23,     2,    59,
    24,    25,    58,    26,    96,    97,    27,    98,    28,    99,
   100,     7,     8,     9,    10,    11,    20,    21,    22,    23,
     2,    57,    24,    25,    56,    26,    55,    29,    27,   105,
    28,   106,   107,     7,     8,     9,    10,    11,    20,    21,
    22,    23,    51,   108,    24,    25,   nil,    26,   nil,   nil,
    27,   nil,    28,   nil,   nil,    49,    50,   nil,   nil,   nil,
    20,    21,    22,    23,     2,   nil,    24,    25,   nil,    26,
   nil,   nil,    27,   nil,    28,   nil,   nil,     7,     8,     9,
    10,    11,    20,    21,    22,    23,     2,   nil,    24,    25,
   nil,    26,   nil,   nil,    27,   nil,    28,   nil,   nil,     7,
     8,     9,    10,    11,    20,    21,    22,    23,     2,   nil,
    24,    25,   nil,    26,   nil,   nil,    27,   nil,    28,   nil,
   nil,     7,     8,     9,    10,    11,    20,    21,    22,    23,
     2,   nil,    24,    25,   nil,    26,   nil,   nil,    27,   nil,
    28,   nil,   nil,     7,     8,     9,    10,    11,    20,    21,
    22,    23,     2,   nil,    24,    25,   nil,    26,   nil,   nil,
    27,   nil,    28,   nil,   nil,     7,     8,     9,    10,    11,
    20,    21,    22,    23,     2,   nil,    24,    25,   nil,    26,
   nil,   nil,    27,   nil,    28,   nil,   nil,     7,     8,     9,
    10,    11,    20,    21,    22,    23,     2,   nil,    24,    25,
   nil,    26,   nil,   nil,    27,   nil,    28,   nil,   nil,     7,
     8,     9,    10,    11,    20,    21,    22,    23,     2,   nil,
    24,    25,   nil,    26,   nil,   nil,    27,   nil,    28,   nil,
   nil,     7,     8,     9,    10,    11,    20,    21,    22,    23,
     2,   nil,    24,    25,   nil,    26,   nil,   nil,    27,   nil,
    28,   nil,   nil,     7,     8,     9,    10,    11,    20,    21,
    22,    23,     2,   nil,    24,    25,   nil,    26,   nil,   nil,
    27,   nil,    28,   nil,   nil,     7,     8,     9,    10,    11,
    20,    21,    22,    23,     2,   nil,    24,    25,   nil,    26,
   nil,   nil,    27,   nil,    28,   nil,   nil,     7,     8,     9,
    10,    11,    20,    21,    22,    23,     2,   nil,    24,    25,
   nil,    26,   nil,   nil,    27,   nil,    28,   nil,   nil,     7,
     8,     9,    10,    11,    20,    21,    22,    23,     2,   nil,
    24,    25,   nil,    26,   nil,   nil,    27,   nil,    28,   nil,
   nil,     7,     8,     9,    10,    11,    20,    21,    22,    23,
     2,   nil,    24,    25,   nil,    26,   nil,   nil,    27,   nil,
    28,   nil,   nil,     7,     8,     9,    10,    11,    20,    21,
    22,    23,   nil,   nil,    24,    25,   nil,    26,    54,    46,
    27,   nil,    28,    20,    21,    22,    23,   nil,   nil,    24,
    25,   nil,    26,   nil,    46,    27,   nil,    28,    20,    21,
    22,    23,   nil,   nil,    24,    25,   nil,    26,    91,    92,
    93,    94 ]

racc_action_check = [
     0,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,    30,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    94,    55,     0,     0,     8,     0,     8,     8,
     0,    50,     0,    50,    50,    94,    94,    94,    94,    94,
    94,    94,    94,    94,     2,    56,    94,    94,    77,    94,
    77,    77,    94,    46,    94,    46,    46,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    44,    57,     2,     2,
    58,     2,    43,    43,     2,    59,     2,    42,    42,    44,
    44,    44,    44,    29,    44,    44,    44,    44,    41,    28,
    44,    44,    27,    44,    84,    85,    44,    86,    44,    87,
    88,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    40,    24,    41,    41,    23,    41,    22,     1,    41,    95,
    41,    97,    99,    40,    40,    40,    40,    40,    40,    40,
    40,    40,    20,   107,    40,    40,   nil,    40,   nil,   nil,
    40,   nil,    40,   nil,   nil,    20,    20,   nil,   nil,   nil,
    20,    20,    20,    20,    39,   nil,    20,    20,   nil,    20,
   nil,   nil,    20,   nil,    20,   nil,   nil,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    93,   nil,    39,    39,
   nil,    39,   nil,   nil,    39,   nil,    39,   nil,   nil,    93,
    93,    93,    93,    93,    93,    93,    93,    93,    92,   nil,
    93,    93,   nil,    93,   nil,   nil,    93,   nil,    93,   nil,
   nil,    92,    92,    92,    92,    92,    92,    92,    92,    92,
    91,   nil,    92,    92,   nil,    92,   nil,   nil,    92,   nil,
    92,   nil,   nil,    91,    91,    91,    91,    91,    91,    91,
    91,    91,    83,   nil,    91,    91,   nil,    91,   nil,   nil,
    91,   nil,    91,   nil,   nil,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    38,   nil,    83,    83,   nil,    83,
   nil,   nil,    83,   nil,    83,   nil,   nil,    38,    38,    38,
    38,    38,    38,    38,    38,    38,    37,   nil,    38,    38,
   nil,    38,   nil,   nil,    38,   nil,    38,   nil,   nil,    37,
    37,    37,    37,    37,    37,    37,    37,    37,    51,   nil,
    37,    37,   nil,    37,   nil,   nil,    37,   nil,    37,   nil,
   nil,    51,    51,    51,    51,    51,    51,    51,    51,    51,
    36,   nil,    51,    51,   nil,    51,   nil,   nil,    51,   nil,
    51,   nil,   nil,    36,    36,    36,    36,    36,    36,    36,
    36,    36,    32,   nil,    36,    36,   nil,    36,   nil,   nil,
    36,   nil,    36,   nil,   nil,    32,    32,    32,    32,    32,
    32,    32,    32,    32,    33,   nil,    32,    32,   nil,    32,
   nil,   nil,    32,   nil,    32,   nil,   nil,    33,    33,    33,
    33,    33,    33,    33,    33,    33,    34,   nil,    33,    33,
   nil,    33,   nil,   nil,    33,   nil,    33,   nil,   nil,    34,
    34,    34,    34,    34,    34,    34,    34,    34,    35,   nil,
    34,    34,   nil,    34,   nil,   nil,    34,   nil,    34,   nil,
   nil,    35,    35,    35,    35,    35,    35,    35,    35,    35,
    31,   nil,    35,    35,   nil,    35,   nil,   nil,    35,   nil,
    35,   nil,   nil,    31,    31,    31,    31,    31,    31,    31,
    31,    31,   nil,   nil,    31,    31,   nil,    31,    21,    21,
    31,   nil,    31,    21,    21,    21,    21,   nil,   nil,    21,
    21,   nil,    21,   nil,    11,    21,   nil,    21,    11,    11,
    11,    11,   nil,   nil,    11,    11,   nil,    11,    61,    61,
    61,    61 ]

racc_action_pointer = [
    -2,   117,    42,    -3,   nil,   nil,   nil,   nil,    -2,   nil,
   nil,   468,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   130,   453,   114,   112,   109,   nil,   nil,    59,    56,    83,
     9,   438,   350,   372,   394,   416,   328,   284,   262,   152,
   108,    86,    62,    57,    64,   nil,    25,   nil,   nil,   nil,
     3,   306,   nil,   nil,   nil,     7,    29,    51,    38,    41,
   nil,   494,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   240,    91,    74,    94,    75,    97,   nil,
   nil,   218,   196,   174,    20,   116,   nil,   105,   nil,    97,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   130,   nil ]

racc_action_default = [
    -1,   -61,    -1,   -17,   -18,   -19,   -20,   -21,   -22,   -23,
   -24,   -61,   -26,   -27,   -28,   -29,   -30,   -31,   -32,   -33,
   -61,   -61,   -61,   -61,   -61,   -46,   -49,   -61,   -61,   -61,
   -61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   -61,   -61,   -61,   -25,   -61,   -34,   -35,   -36,
   -37,    -1,   -39,   -40,   -41,   -61,   -61,   -61,   -61,   -61,
   109,   -61,    -6,    -7,    -8,    -9,   -10,   -11,   -12,   -13,
   -14,   -15,   -16,   -47,   -48,   -50,   -51,   -53,   -52,   -54,
   -55,   -56,   -57,    -1,   -61,   -61,   -61,   -61,   -61,   -59,
   -60,    -1,    -1,    -1,    -1,   -61,   -38,   -61,   -43,   -61,
   -45,    -2,    -3,    -4,    -5,   -58,   -42,   -61,   -44 ]

racc_goto_table = [
     1,    85,    30,    48,    53,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    52,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,   nil,
   nil,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    95,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   101,   102,   103,   104 ]

racc_goto_check = [
     1,    14,     1,     5,     5,   nil,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     1,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     1,     1,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,    -2,   nil,   -17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -53 ]

racc_goto_default = [
   nil,   nil,     3,     4,     5,     6,    12,    13,    14,    15,
    16,    17,    18,    19,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 36, :_reduce_1,
  5, 36, :_reduce_2,
  5, 36, :_reduce_3,
  5, 36, :_reduce_4,
  5, 36, :_reduce_5,
  3, 36, :_reduce_none,
  3, 36, :_reduce_7,
  3, 36, :_reduce_8,
  3, 36, :_reduce_9,
  3, 36, :_reduce_10,
  3, 36, :_reduce_11,
  3, 36, :_reduce_12,
  3, 36, :_reduce_13,
  3, 36, :_reduce_14,
  3, 36, :_reduce_15,
  3, 36, :_reduce_16,
  1, 36, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_20,
  1, 37, :_reduce_21,
  1, 37, :_reduce_22,
  1, 37, :_reduce_23,
  1, 37, :_reduce_24,
  2, 39, :_reduce_25,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  2, 41, :_reduce_34,
  2, 41, :_reduce_35,
  2, 41, :_reduce_36,
  2, 41, :_reduce_37,
  4, 41, :_reduce_38,
  2, 42, :_reduce_39,
  2, 42, :_reduce_40,
  0, 49, :_reduce_41,
  5, 42, :_reduce_42,
  4, 43, :_reduce_43,
  6, 45, :_reduce_44,
  4, 44, :_reduce_45,
  1, 46, :_reduce_46,
  3, 46, :_reduce_47,
  3, 46, :_reduce_48,
  1, 47, :_reduce_49,
  3, 47, :_reduce_50,
  3, 47, :_reduce_51,
  3, 48, :_reduce_52,
  3, 48, :_reduce_53,
  3, 48, :_reduce_54,
  3, 48, :_reduce_55,
  3, 48, :_reduce_56,
  3, 48, :_reduce_57,
  5, 48, :_reduce_58,
  3, 40, :_reduce_59,
  3, 40, :_reduce_60 ]

racc_reduce_n = 61

racc_shift_n = 109

racc_token_table = {
  false => 0,
  :error => 1,
  :LPAREN => 2,
  :RPAREN => 3,
  :ANDTOK => 4,
  :ORTOK => 5,
  :ADD => 6,
  :SUB => 7,
  :SEMICOLON => 8,
  :EQ => 9,
  :GT => 10,
  :LT => 11,
  :LE => 12,
  :GE => 13,
  :NE => 14,
  :DIGITS => 15,
  :VAR => 16,
  :HEXVALUE => 17,
  :IPV4ADDR => 18,
  :NOTTOK => 19,
  :PUTSTOK => 20,
  :PRINTTOK => 21,
  :TYPETOK => 22,
  :SETMODETOK => 23,
  :COMMA => 24,
  :SYMBOL => 25,
  :GETMODETOK => 26,
  :VARDECTOK => 27,
  :VARDECAMT => 28,
  :VARINCTOK => 29,
  :VARINCAMT => 30,
  :EQUAL => 31,
  :QUOTE => 32,
  :DATA => 33,
  :SINGLE_QUOTE => 34 }

racc_nt_base = 35

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LPAREN",
  "RPAREN",
  "ANDTOK",
  "ORTOK",
  "ADD",
  "SUB",
  "SEMICOLON",
  "EQ",
  "GT",
  "LT",
  "LE",
  "GE",
  "NE",
  "DIGITS",
  "VAR",
  "HEXVALUE",
  "IPV4ADDR",
  "NOTTOK",
  "PUTSTOK",
  "PRINTTOK",
  "TYPETOK",
  "SETMODETOK",
  "COMMA",
  "SYMBOL",
  "GETMODETOK",
  "VARDECTOK",
  "VARDECAMT",
  "VARINCTOK",
  "VARINCAMT",
  "EQUAL",
  "QUOTE",
  "DATA",
  "SINGLE_QUOTE",
  "$start",
  "commands",
  "truth_stmt",
  "command",
  "not_command",
  "quotedtext",
  "puts_cmd",
  "print_cmd",
  "type_cmd",
  "get_mode_cmd",
  "set_mode_cmd",
  "vardec_cmd",
  "varinc_cmd",
  "variable_assignment",
  "@1" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'SecLang.y', 5)
  def _reduce_1(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 8)
  def _reduce_2(val, _values, result)
                 result = val[1] && val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 12)
  def _reduce_3(val, _values, result)
                 result = val[1] || val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 16)
  def _reduce_4(val, _values, result)
                 result = @s.var_add_var(val[1], val[4])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 20)
  def _reduce_5(val, _values, result)
                 result = @s.var_sub_var(val[1], val[4])
           
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'SecLang.y', 25)
  def _reduce_7(val, _values, result)
                 result = val[0] && val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 29)
  def _reduce_8(val, _values, result)
                 result = val[0] || val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 34)
  def _reduce_9(val, _values, result)
                 result = val[0] == val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 39)
  def _reduce_10(val, _values, result)
                 result = val[0] > val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 44)
  def _reduce_11(val, _values, result)
                 result = val[0] < val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 49)
  def _reduce_12(val, _values, result)
                 result = val[0] <= val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 54)
  def _reduce_13(val, _values, result)
                 result = val[0] >= val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 59)
  def _reduce_14(val, _values, result)
                 result = val[0] != val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 64)
  def _reduce_15(val, _values, result)
                 result = @s.var_add_var(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 69)
  def _reduce_16(val, _values, result)
                 result = @s.var_sub_var(val[0], val[2])
           
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'SecLang.y', 81)
  def _reduce_20(val, _values, result)
    		result = StringVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 86)
  def _reduce_21(val, _values, result)
    		result = IntVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 91)
  def _reduce_22(val, _values, result)
                    result = @s.get_var(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 96)
  def _reduce_23(val, _values, result)
    		result = HexVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 101)
  def _reduce_24(val, _values, result)
    		result = IPv4Var.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 108)
  def _reduce_25(val, _values, result)
                      result = val[1] ? false : true
           
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'SecLang.y', 133)
  def _reduce_34(val, _values, result)
    		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 138)
  def _reduce_35(val, _values, result)
     		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 143)
  def _reduce_36(val, _values, result)
    		result = puts(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 148)
  def _reduce_37(val, _values, result)
    		result = puts(@s.var_value(val[1]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 153)
  def _reduce_38(val, _values, result)
    		result = puts(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 160)
  def _reduce_39(val, _values, result)
    		result = print(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 165)
  def _reduce_40(val, _values, result)
    		result = print(val[1])
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 170)
  def _reduce_41(val, _values, result)
    		result = print(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 174)
  def _reduce_42(val, _values, result)
    		result = print(@s.var_value(val[1]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 181)
  def _reduce_43(val, _values, result)
    		result = @s.var_type(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 188)
  def _reduce_44(val, _values, result)
    		result = @s.var_set_mode(val[2], val[4])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 195)
  def _reduce_45(val, _values, result)
    		result = @s.var_get_mode(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 202)
  def _reduce_46(val, _values, result)
    		result = @s.var_dec(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 207)
  def _reduce_47(val, _values, result)
    		result = @s.var_dec(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 212)
  def _reduce_48(val, _values, result)
                 	result = @s.var_dec_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 219)
  def _reduce_49(val, _values, result)
    		result = @s.var_inc(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 224)
  def _reduce_50(val, _values, result)
    		result = @s.var_inc(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 229)
  def _reduce_51(val, _values, result)
                 	result = @s.var_inc_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 236)
  def _reduce_52(val, _values, result)
                    r = val[2]
                if r.is_a? SecVar
                  result = @s.add_var(val[0], r)
                elsif r.is_a? Integer
		  result = @s.add_var(val[0], IntVar.new(val[2]))
                else r.is_a? String
		  result = @s.add_var(val[0], StringVar.new(val[2]))
                end
		result
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 249)
  def _reduce_53(val, _values, result)
    		result = @s.copy_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 254)
  def _reduce_54(val, _values, result)
    		result = @s.add_var(val[0], IntVar.new(val[2]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 259)
  def _reduce_55(val, _values, result)
    		result = @s.add_var(val[0], StringVar.new(val[2]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 264)
  def _reduce_56(val, _values, result)
    		result = @s.add_var(val[0], IPv4Var.new(val[2]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 269)
  def _reduce_57(val, _values, result)
    		result = @s.add_var(val[0], HexVar.new(val[2]))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 274)
  def _reduce_58(val, _values, result)
                    t = val[3]
		result = @s.add_var(val[0], StringVar.new(t.to_s))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 282)
  def _reduce_59(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 286)
  def _reduce_60(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SecLang


