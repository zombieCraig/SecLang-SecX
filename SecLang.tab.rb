#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


# generated by racc

require 'strscan'
require "#{File.dirname(__FILE__)}/SecLangCore"

class SecLang < Racc::Parser

module_eval(<<'...end SecLang.y/module_eval...', 'SecLang.y', 288)
  attr_accessor :script

  def initialize
    @syntax_check = false
    @s = SecLangCore.new(self)
    @state = :MAIN
    @last_state = []
    @last_state.push @state
    @nested_stack = Array.new
    @depth = 0
  end

  def clear_tokens
    @tokens = []
  end

  def check_syntax( str )
    @syntax_check = true
    res = parse(str)
    @syntax_check = false
    @tokens = []
    return res
  end

  def parse(str)
    @script = str
    @tokens = [] if not @tokens
    scanner = StringScanner.new(str)
    
    until scanner.eos?
      case
        when @state == :MAIN
          case
            when m = scanner.scan(/puts/)
              @tokens.push [:PUTSTOK, m]
            when m = scanner.scan(/print/)
              @tokens.push [:PRINTTOK, m]
            when m = scanner.scan(/type/)
              @tokens.push [:TYPETOK, m]
            when m = scanner.scan(/mode/)
              @tokens.push [:GETMODETOK, m]
            when m = scanner.scan(/set_mode/)
              @tokens.push [:SETMODETOK, m]
            when m = scanner.scan(/hex/)
              @tokens.push [:HEXTOK, m]
            when m = scanner.scan(/if/)
              @tokens.push [:IFTOK, m]
            when m = scanner.scan(/else/)
              @tokens.push [:ELSETOK, m]
            when m = scanner.scan(/while/)
              @tokens.push [:WHILETOK, m]
            when m = scanner.scan(/{/)
              @tokens.push [:OBRACE, m]
              @last_state.push @state
              @state = :CODE_BLOCK
              @code_blocks = Array.new
              @code_segment = String.new
              @depth = 1
            when m = scanner.scan(/\(/)
              @tokens.push [:LPAREN, m]
            when m = scanner.scan(/\)/)
              @tokens.push [:RPAREN, m]
            when m = scanner.scan(/\"/)
              @tokens.push [:QUOTE, m]
              @last_state.push @state
              @state = :QUOTED 
            when m = scanner.scan(/\'/)
              @tokens.push [:SINGLE_QUOTE, m]
              @last_state.push @state
              @state = :SINGLE_QUOTED
            when m = scanner.scan(/\/\*/)
              @last_state.push @state
              @state = :BLOCK_COMMENT
            when m = scanner.scan(/\[/)
              @tokens.push [:LBRACKET, m]
            when m = scanner.scan(/\]/)
              @tokens.push [:RBRACKET, m]
            when m = scanner.scan(/,/)
              @tokens.push [:COMMA, m]
            when m = scanner.scan(/=~/)
              @tokens.push [:MATCHTOK, m]
            when m = scanner.scan(/==/)
              @tokens.push [:EQ, m]
            when m = scanner.scan(/>=/)
              @tokens.push [:GE, m]
            when m = scanner.scan(/<=/)
              @tokens.push [:LE, m]
            when m = scanner.scan(/</)
              @tokens.push [:LT, m]
            when m = scanner.scan(/>/)
              @tokens.push [:GT, m]
            when m = scanner.scan(/!=/)
              @tokens.push [:NE, m]
            when m = scanner.scan(/\|\|/)
              @tokens.push [:ORTOK, m]
            when m = scanner.scan(/&&/)
              @tokens.push [:ANDTOK, m]
            when m = scanner.scan(/=/)
              @tokens.push [:EQUAL, m]
            when m = scanner.scan(/(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/)
              @tokens.push [:IPV4ADDR, m]
            when m = scanner.scan(/0x[0-9a-fA-F]+/)
              @tokens.push [:HEXVALUE, m]
            when m = scanner.scan(/\+=/)
              @tokens.push [:VARINCAMT, m]
            when m = scanner.scan(/-=/)
              @tokens.push [:VARDECAMT, m]
            when m = scanner.scan(/def [a-zA-Z_][a-zA-Z0-9_]*\(/)
              @tokens.push [:DEFTOK, m]
              @last_state.push @state
              @state = :FUNC_DEFINE
            when m = scanner.scan(/[a-zA-Z_][a-zA-Z0-9_]*\(/)
              @tokens.push [:FUNCTOK, m]
            when m = scanner.scan(/:[a-zA-Z][a-zA-Z0-9_-]*/)
              @tokens.push [:SYMBOL, m]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*\-\-/)
              @tokens.push [:VARDECTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*\+\+/)
              @tokens.push [:VARINCTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*/)
              @tokens.push [:VAR, m]
            when m = scanner.scan(/[\-0-9]+/)
              @tokens.push [:DIGITS, m]
            when m = scanner.scan(/\+/)
              @tokens.push [:ADD, m]
            when m = scanner.scan(/\-/)
              @tokens.push [:SUB, m]
            when m = scanner.scan(/\`/)
              @tokens.push [:BACKTICK, m]
              @last_state.push @state
              @state = :BACKTICKS
            when m = scanner.scan(/;/)
              @tokens.push [:SEMICOLON, m]
            when scanner.scan(/[ \t\r\n]/)
              # ignore whtiespace
            else
              puts "Syntax error around #{scanner.pos} #{scanner.rest}"
              return -1
          end
       when @state == :BLOCK_COMMENT
         case
           when m = scanner.skip_until(/\*\//)
             @state = @last_state.pop
           when m = scanner.scan(/./)
           when m = scanner.scan(/[\r\n]/)
             # ignore
         end
       when @state == :FUNC_DEFINE
         case
           when m = scanner.scan(/\)/)
             @tokens.push [:RPAREN, m]
             @state = @last_state.pop
           when m = scanner.scan(/[^\)]+/)
             @tokens.push [:ARGS_DEF, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when @state == :BACKTICKS
         case
           when m = scanner.scan(/\`/)
             @tokens.push [:BACKTICK, m]
             @state = @last_state.pop
           when m = scanner.scan(/[^`]+/)
             @tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when @state == :CODE_BLOCK
         case
            when m = scanner.scan(/}/)
              @depth -= 1
              if @depth <= 0 then
                @state = @last_state.pop
                @code_blocks.push @code_segment
                @tokens.push [:BLOCK, @code_blocks]
                @tokens.push [:EBRACE, m]
                @depth = 0
              else
                @code_segment += m
              end
            when m = scanner.scan(/{/)
              @depth+= 1
              @code_segment += m
            when m = scanner.scan(/./)
              @code_segment += m
            when m = scanner.scan(/[\r\n]/)
              @code_segment += m
              @code_blocks.push @code_segment
              @code_segment = String.new
         end
       when @state == :QUOTED
         case
           when m = scanner.scan(/\"/)
             @tokens.push [:QUOTE, m]
             @state = @last_state.pop
           when m = scanner.scan(/[^"]+/)
             @tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when @state == :SINGLE_QUOTED
         case
           when m = scanner.scan(/\'/)
             @tokens.push [:SINGLE_QUOTE, m]
             @state = @last_state.pop
           when m = scanner.scan(/[^']+/)
             @tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end

       end
    end
    #@tokens.push [false, false]

    if @last_state.size > 1 and not 
       (@state == :BLOCK_COMMENT or @state == :CODE_BLOCK) then
      puts "Unclosed brackets (#{@last_state.pop.to_s})"
      return -1
    end

    # Only parse @tokens when back at MAIN
    truth = nil
    if @last_state.size == 1 then
      @tokens.push [false, false]
      truth = yyparse(@tokens, :each)
      @tokens = []
    end
    return truth
  end

  def on_error(error_token_id, error_value, value_stack)
    msg = "parse error "
    msg << "after #{value_stack.last} " if value_stack.length > 1
    msg << "on #{token_to_str(error_token_id)} #{error_value}"
    msg << "\n#{@tokens.inspect}"
    clear_tokens
    raise ParseError, msg
  end

  def loop
    @tokens = @nested_stack.pop
    yyparse(@tokens, :each) if @tokens.size > 0
  end

...end SecLang.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    90,    91,    56,   104,   105,   106,   107,    57,   114,
    58,    73,    72,    71,     7,     8,     9,    57,    70,    58,
    59,    10,    14,    15,    16,    17,    18,    94,    19,    28,
    95,    29,     2,    30,    69,    31,    32,    96,    33,    34,
    97,    35,    98,    99,    36,    37,     7,     8,     9,   100,
   101,   102,   103,    10,    14,    15,    16,    17,    18,    68,
    19,    28,   108,    29,     2,    30,   109,    31,    32,   110,
    33,    34,    67,    35,   112,   113,    36,    37,     7,     8,
     9,    74,   115,    65,    55,    10,    14,    15,    16,    17,
    18,    54,    19,    28,    38,    29,     2,    30,   120,    31,
    32,   121,    33,    34,   122,    35,   123,   124,    36,    37,
     7,     8,     9,   125,   126,   127,   128,    10,    14,    15,
    16,    17,    18,   129,    19,    28,   130,    29,     2,    30,
   131,    31,    32,   132,    33,    34,   133,    35,   nil,   nil,
    36,    37,     7,     8,     9,   nil,   nil,   nil,   nil,    10,
    14,    15,    16,    17,    18,   nil,    19,    28,   nil,    29,
     2,    30,   nil,    31,    32,   nil,    33,    34,   nil,    35,
   nil,   nil,    36,    37,     7,     8,     9,   nil,   nil,   nil,
   nil,    10,    14,    15,    16,    17,    18,   nil,    19,    28,
   nil,    29,     2,    30,   nil,    31,    32,   nil,    33,    34,
   nil,    35,   nil,   nil,    36,    37,     7,     8,     9,   nil,
   nil,   nil,   nil,    10,    14,    15,    16,    17,    18,   nil,
    19,    28,   nil,    29,     2,    30,   nil,    31,    32,   nil,
    33,    34,   nil,    35,   nil,   nil,    36,    37,     7,     8,
     9,   nil,   nil,   nil,   nil,    10,    14,    15,    16,    17,
    18,   nil,    19,    28,   nil,    29,     2,    30,   nil,    31,
    32,   nil,    33,    34,   nil,    35,   nil,   nil,    36,    37,
     7,     8,     9,   nil,   nil,   nil,   nil,    10,    14,    15,
    16,    17,    18,   nil,    19,    28,   nil,    29,     2,    30,
   nil,    31,    32,   nil,    33,    34,   nil,    35,   nil,   nil,
    36,    37,     7,     8,     9,   nil,   nil,   nil,   nil,    10,
    14,    15,    16,    17,    18,   nil,    19,    28,   nil,    29,
     2,    30,   nil,    31,    32,   nil,    33,    34,   nil,    35,
   nil,   nil,    36,    37,     7,     8,     9,   nil,   nil,   nil,
   nil,    10,    14,    15,    16,    17,    18,   nil,    19,    28,
   nil,    29,     2,    30,   nil,    31,    32,   nil,    33,    34,
   nil,    35,   nil,   nil,    36,    37,     7,     8,     9,   nil,
   nil,   nil,   nil,    10,    14,    15,    16,    17,    18,   nil,
    19,    28,   nil,    29,     2,    30,   nil,    31,    32,   nil,
    33,    34,   nil,    35,   nil,   nil,    36,    37,     7,     8,
     9,   nil,   nil,   nil,   nil,    10,    14,    15,    16,    17,
    18,   nil,    19,    28,   nil,    29,     2,    30,   nil,    31,
    32,   nil,    33,    34,   nil,    35,   nil,   nil,    36,    37,
     7,     8,     9,   nil,   nil,   nil,   nil,    10,    14,    15,
    16,    17,    18,   nil,    19,    28,   nil,    29,     2,    30,
   nil,    31,    32,   nil,    33,    34,   nil,    35,   nil,   nil,
    36,    37,     7,     8,     9,   nil,   nil,   nil,   nil,    10,
    14,    15,    16,    17,    18,   nil,    19,    28,   nil,    29,
     2,    30,   nil,    31,    32,   nil,    33,    34,   nil,    35,
   nil,   nil,    36,    37,     7,     8,     9,   nil,   nil,   nil,
   nil,    10,    14,    15,    16,    17,    18,   nil,    19,    28,
   nil,    29,     2,    30,   nil,    31,    32,   nil,    33,    34,
   nil,    35,   nil,   nil,    36,    37,     7,     8,     9,   nil,
   nil,   nil,   nil,    10,    14,    15,    16,    17,    18,   nil,
    19,    28,   nil,    29,     2,    30,   nil,    31,    32,   nil,
    33,    34,   nil,    35,   nil,   nil,    36,    37,     7,     8,
     9,   nil,   nil,   nil,   nil,    10,    14,    15,    16,    17,
    18,   nil,    19,    28,   nil,    29,     2,    30,   nil,    31,
    32,   nil,    33,    34,   nil,    35,   nil,   nil,    36,    37,
     7,     8,     9,   nil,   nil,   nil,   nil,    10,    14,    15,
    16,    17,    18,   nil,    19,    28,   nil,    29,     2,    30,
   nil,    31,    32,   nil,    33,    34,   nil,    35,   nil,   nil,
    36,    37,     7,     8,     9,   nil,   nil,   nil,   nil,    10,
    14,    15,    16,    17,    18,   nil,    19,    28,   nil,    29,
     2,    30,   nil,    31,    32,   nil,    33,    34,   nil,    35,
   nil,   nil,    36,    37,     7,     8,     9,   nil,   nil,   nil,
   nil,    10,    14,    15,    16,    17,    18,   nil,    19,    28,
   nil,    29,     2,    30,   nil,    31,    32,   nil,    33,    34,
   nil,    35,   nil,   nil,    36,    37,     7,     8,     9,   nil,
   nil,   nil,   nil,    10,    14,    15,    16,    17,    18,   nil,
    19,    28,   nil,    29,     2,    30,   nil,    31,    32,   nil,
    33,    34,   nil,    35,   nil,   nil,    36,    37,     7,     8,
     9,   nil,    56,   nil,   nil,    10,    14,    15,    16,    17,
    18,   nil,    19,    28,   nil,    29,    57,    30,    58,    31,
    32,   nil,    33,    34,   nil,    35,   nil,   nil,    36,    37,
    14,    60,    16,    17,    18,   nil,    19,    28,   nil,    29,
   nil,    30,   nil,    31,    32,   nil,    33,    34,   nil,    35,
   nil,   nil,    36,    37,    14,    60,    16,    17,    18,   nil,
    19,    28,   nil,    29,   nil,    30,   nil,    31,    32,   nil,
    33,    34,   nil,    35,   nil,   nil,    36,    37,    14,    60,
    16,    17,    18,   nil,    19,    28,   nil,    29,   nil,    30,
   nil,    31,    32,   nil,    33,    34,   nil,    35,   nil,   nil,
    36,    37,    14,    60,    16,    17,    18,   nil,    19,    28,
   nil,    29,   nil,    30,   nil,    31,    32,   nil,    33,    34,
   nil,    35,   nil,   nil,    36,    37,    14,    60,    16,    17,
    18,   nil,    19,    28,   nil,    29,   nil,    30,   nil,    31,
    32,   nil,    33,    34,    64,    35,   nil,   nil,    36,    37,
    28,   nil,    29,   nil,    30,   nil,    31,    32,   nil,    33,
    34,   nil,    35,    41,    42,    50,    51,    40,    43,    44,
    45,    46,    47,    48,    49 ]

racc_action_check = [
     0,    57,    57,    15,    74,    74,    74,    74,    64,   100,
    64,    38,    37,    36,     0,     0,     0,    15,    33,    15,
    15,     0,     0,     0,     0,     0,     0,    61,     0,     0,
    62,     0,   107,     0,    32,     0,     0,    65,     0,     0,
    66,     0,    67,    68,     0,     0,   107,   107,   107,    69,
    70,    71,    72,   107,   107,   107,   107,   107,   107,    31,
   107,   107,    87,   107,     2,   107,    88,   107,   107,    89,
   107,   107,    30,   107,    96,    99,   107,   107,     2,     2,
     2,    39,   101,    28,    10,     2,     2,     2,     2,     2,
     2,     9,     2,     2,     1,     2,    55,     2,   108,     2,
     2,   109,     2,     2,   112,     2,   114,   120,     2,     2,
    55,    55,    55,   121,   122,   123,   124,    55,    55,    55,
    55,    55,    55,   125,    55,    55,   128,    55,     7,    55,
   130,    55,    55,   131,    55,    55,   132,    55,   nil,   nil,
    55,    55,     7,     7,     7,   nil,   nil,   nil,   nil,     7,
     7,     7,     7,     7,     7,   nil,     7,     7,   nil,     7,
     8,     7,   nil,     7,     7,   nil,     7,     7,   nil,     7,
   nil,   nil,     7,     7,     8,     8,     8,   nil,   nil,   nil,
   nil,     8,     8,     8,     8,     8,     8,   nil,     8,     8,
   nil,     8,   106,     8,   nil,     8,     8,   nil,     8,     8,
   nil,     8,   nil,   nil,     8,     8,   106,   106,   106,   nil,
   nil,   nil,   nil,   106,   106,   106,   106,   106,   106,   nil,
   106,   106,   nil,   106,   105,   106,   nil,   106,   106,   nil,
   106,   106,   nil,   106,   nil,   nil,   106,   106,   105,   105,
   105,   nil,   nil,   nil,   nil,   105,   105,   105,   105,   105,
   105,   nil,   105,   105,   nil,   105,    54,   105,   nil,   105,
   105,   nil,   105,   105,   nil,   105,   nil,   nil,   105,   105,
    54,    54,    54,   nil,   nil,   nil,   nil,    54,    54,    54,
    54,    54,    54,   nil,    54,    54,   nil,    54,    51,    54,
   nil,    54,    54,   nil,    54,    54,   nil,    54,   nil,   nil,
    54,    54,    51,    51,    51,   nil,   nil,   nil,   nil,    51,
    51,    51,    51,    51,    51,   nil,    51,    51,   nil,    51,
    50,    51,   nil,    51,    51,   nil,    51,    51,   nil,    51,
   nil,   nil,    51,    51,    50,    50,    50,   nil,   nil,   nil,
   nil,    50,    50,    50,    50,    50,    50,   nil,    50,    50,
   nil,    50,   104,    50,   nil,    50,    50,   nil,    50,    50,
   nil,    50,   nil,   nil,    50,    50,   104,   104,   104,   nil,
   nil,   nil,   nil,   104,   104,   104,   104,   104,   104,   nil,
   104,   104,   nil,   104,    49,   104,   nil,   104,   104,   nil,
   104,   104,   nil,   104,   nil,   nil,   104,   104,    49,    49,
    49,   nil,   nil,   nil,   nil,    49,    49,    49,    49,    49,
    49,   nil,    49,    49,   nil,    49,    48,    49,   nil,    49,
    49,   nil,    49,    49,   nil,    49,   nil,   nil,    49,    49,
    48,    48,    48,   nil,   nil,   nil,   nil,    48,    48,    48,
    48,    48,    48,   nil,    48,    48,   nil,    48,    47,    48,
   nil,    48,    48,   nil,    48,    48,   nil,    48,   nil,   nil,
    48,    48,    47,    47,    47,   nil,   nil,   nil,   nil,    47,
    47,    47,    47,    47,    47,   nil,    47,    47,   nil,    47,
    46,    47,   nil,    47,    47,   nil,    47,    47,   nil,    47,
   nil,   nil,    47,    47,    46,    46,    46,   nil,   nil,   nil,
   nil,    46,    46,    46,    46,    46,    46,   nil,    46,    46,
   nil,    46,    45,    46,   nil,    46,    46,   nil,    46,    46,
   nil,    46,   nil,   nil,    46,    46,    45,    45,    45,   nil,
   nil,   nil,   nil,    45,    45,    45,    45,    45,    45,   nil,
    45,    45,   nil,    45,    41,    45,   nil,    45,    45,   nil,
    45,    45,   nil,    45,   nil,   nil,    45,    45,    41,    41,
    41,   nil,   nil,   nil,   nil,    41,    41,    41,    41,    41,
    41,   nil,    41,    41,   nil,    41,    44,    41,   nil,    41,
    41,   nil,    41,    41,   nil,    41,   nil,   nil,    41,    41,
    44,    44,    44,   nil,   nil,   nil,   nil,    44,    44,    44,
    44,    44,    44,   nil,    44,    44,   nil,    44,    43,    44,
   nil,    44,    44,   nil,    44,    44,   nil,    44,   nil,   nil,
    44,    44,    43,    43,    43,   nil,   nil,   nil,   nil,    43,
    43,    43,    43,    43,    43,   nil,    43,    43,   nil,    43,
    42,    43,   nil,    43,    43,   nil,    43,    43,   nil,    43,
   nil,   nil,    43,    43,    42,    42,    42,   nil,   nil,   nil,
   nil,    42,    42,    42,    42,    42,    42,   nil,    42,    42,
   nil,    42,    40,    42,   nil,    42,    42,   nil,    42,    42,
   nil,    42,   nil,   nil,    42,    42,    40,    40,    40,   nil,
   nil,   nil,   nil,    40,    40,    40,    40,    40,    40,   nil,
    40,    40,   nil,    40,    59,    40,   nil,    40,    40,   nil,
    40,    40,   nil,    40,   nil,   nil,    40,    40,    59,    59,
    59,   nil,    60,   nil,   nil,    59,    59,    59,    59,    59,
    59,   nil,    59,    59,   nil,    59,    60,    59,    60,    59,
    59,   nil,    59,    59,   nil,    59,   nil,   nil,    59,    59,
    56,    56,    56,    56,    56,   nil,    56,    56,   nil,    56,
   nil,    56,   nil,    56,    56,   nil,    56,    56,   nil,    56,
   nil,   nil,    56,    56,    18,    18,    18,    18,    18,   nil,
    18,    18,   nil,    18,   nil,    18,   nil,    18,    18,   nil,
    18,    18,   nil,    18,   nil,   nil,    18,    18,    58,    58,
    58,    58,    58,   nil,    58,    58,   nil,    58,   nil,    58,
   nil,    58,    58,   nil,    58,    58,   nil,    58,   nil,   nil,
    58,    58,    29,    29,    29,    29,    29,   nil,    29,    29,
   nil,    29,   nil,    29,   nil,    29,    29,   nil,    29,    29,
   nil,    29,   nil,   nil,    29,    29,    95,    95,    95,    95,
    95,   nil,    95,    95,   nil,    95,   nil,    95,   nil,    95,
    95,   nil,    95,    95,    19,    95,   nil,   nil,    95,    95,
    19,   nil,    19,   nil,    19,   nil,    19,    19,   nil,    19,
    19,   nil,    19,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4 ]

racc_action_pointer = [
    -2,    94,    62,   nil,   879,   nil,   nil,   126,   158,    89,
    82,   nil,   nil,   nil,   nil,   -25,   nil,   nil,   750,   839,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,   798,
    36,    57,    32,    16,   nil,   nil,   -23,   -24,    11,    78,
   670,   542,   638,   606,   574,   510,   478,   446,   414,   382,
   318,   286,   nil,   nil,   254,    94,   726,   -23,   774,   702,
   694,    -2,    -4,   nil,   -34,    34,    37,     7,    18,    24,
    25,     5,     5,   nil,     0,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    59,    63,    40,
   nil,   nil,   nil,   nil,   nil,   822,    55,   nil,   nil,    72,
   -25,    79,   nil,   nil,   350,   222,   190,    30,    79,    82,
   nil,   nil,    84,   nil,    67,   nil,   nil,   nil,   nil,   nil,
    87,    93,    93,   112,    95,   102,   nil,   nil,   104,   nil,
   111,   113,   115,   nil ]

racc_action_default = [
    -1,   -62,    -1,    -6,   -23,    -8,    -9,    -1,    -1,   -62,
   -62,   -27,   -28,   -29,   -30,   -31,   -32,   -33,   -47,   -62,
   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -62,   -47,
   -62,   -62,   -62,   -62,   -54,   -57,   -62,   -62,   -62,   -62,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   -21,   -22,    -1,    -1,   -62,   -62,   -62,    -1,
   -31,   -62,   -48,   -36,   -62,   -62,   -62,   -62,   -62,   -62,
   -62,   -62,   -62,   134,   -62,    -7,   -10,   -11,   -12,   -13,
   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -62,   -62,   -62,
   -55,   -56,   -58,   -59,   -35,   -47,   -62,   -46,   -50,   -62,
   -62,   -62,   -60,   -61,    -1,    -1,    -1,    -1,   -62,   -62,
   -34,   -49,   -62,   -51,   -62,   -53,    -2,    -3,    -4,    -5,
   -62,   -62,   -62,   -62,   -62,   -62,   -45,   -52,   -25,   -26,
   -62,   -62,   -62,   -24 ]

racc_goto_table = [
     1,    61,    39,    63,   nil,   nil,   nil,    52,    53,   nil,
   nil,   nil,    66,   nil,   nil,   nil,   nil,   nil,    62,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    62,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,   nil,   nil,    87,    88,    89,   nil,    92,    93,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   111,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    62,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   116,   117,   118,   119 ]

racc_goto_check = [
     1,     9,     1,     6,   nil,   nil,   nil,     1,     1,   nil,
   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,   nil,   nil,     1,     1,     3,   nil,     3,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     1,     1,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,     0,   nil,   nil,   -16,   nil,   nil,   -17,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     3,     4,     5,     6,    11,    12,    13,   nil,
    20,    21,    22,    23,    24,    25,    26,    27 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 49, :_reduce_1,
  5, 49, :_reduce_2,
  5, 49, :_reduce_3,
  5, 49, :_reduce_4,
  5, 49, :_reduce_5,
  1, 49, :_reduce_none,
  3, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  3, 49, :_reduce_10,
  3, 49, :_reduce_11,
  3, 49, :_reduce_12,
  3, 49, :_reduce_13,
  3, 49, :_reduce_14,
  3, 49, :_reduce_15,
  3, 49, :_reduce_16,
  3, 49, :_reduce_17,
  3, 49, :_reduce_18,
  3, 49, :_reduce_19,
  3, 49, :_reduce_20,
  2, 49, :_reduce_21,
  2, 49, :_reduce_22,
  1, 49, :_reduce_none,
  11, 52, :_reduce_24,
  7, 52, :_reduce_25,
  7, 53, :_reduce_26,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_29,
  1, 51, :_reduce_30,
  1, 51, :_reduce_31,
  1, 51, :_reduce_32,
  1, 51, :_reduce_33,
  4, 51, :_reduce_34,
  3, 51, :_reduce_35,
  2, 55, :_reduce_36,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  6, 65, :_reduce_45,
  3, 64, :_reduce_46,
  0, 57, :_reduce_47,
  1, 57, :_reduce_48,
  3, 57, :_reduce_49,
  3, 63, :_reduce_50,
  4, 58, :_reduce_51,
  6, 61, :_reduce_52,
  4, 59, :_reduce_53,
  1, 60, :_reduce_54,
  3, 60, :_reduce_55,
  3, 60, :_reduce_56,
  1, 62, :_reduce_57,
  3, 62, :_reduce_58,
  3, 50, :_reduce_59,
  3, 56, :_reduce_60,
  3, 56, :_reduce_61 ]

racc_reduce_n = 62

racc_shift_n = 134

racc_token_table = {
  false => 0,
  :error => 1,
  :LPAREN => 2,
  :RPAREN => 3,
  :ANDTOK => 4,
  :ORTOK => 5,
  :ADD => 6,
  :SUB => 7,
  :SEMICOLON => 8,
  :MATCHTOK => 9,
  :EQ => 10,
  :GT => 11,
  :LT => 12,
  :LE => 13,
  :GE => 14,
  :NE => 15,
  :PUTSTOK => 16,
  :PRINTTOK => 17,
  :IFTOK => 18,
  :OBRACE => 19,
  :BLOCK => 20,
  :EBRACE => 21,
  :ELSETOK => 22,
  :WHILETOK => 23,
  :DIGITS => 24,
  :VAR => 25,
  :HEXVALUE => 26,
  :IPV4ADDR => 27,
  :LBRACKET => 28,
  :RBRACKET => 29,
  :NOTTOK => 30,
  :DEFTOK => 31,
  :ARGS_DEF => 32,
  :FUNCTOK => 33,
  :COMMA => 34,
  :BACKTICK => 35,
  :DATA => 36,
  :TYPETOK => 37,
  :SETMODETOK => 38,
  :SYMBOL => 39,
  :GETMODETOK => 40,
  :VARDECTOK => 41,
  :VARDECAMT => 42,
  :VARINCTOK => 43,
  :VARINCAMT => 44,
  :EQUAL => 45,
  :QUOTE => 46,
  :SINGLE_QUOTE => 47 }

racc_nt_base = 48

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LPAREN",
  "RPAREN",
  "ANDTOK",
  "ORTOK",
  "ADD",
  "SUB",
  "SEMICOLON",
  "MATCHTOK",
  "EQ",
  "GT",
  "LT",
  "LE",
  "GE",
  "NE",
  "PUTSTOK",
  "PRINTTOK",
  "IFTOK",
  "OBRACE",
  "BLOCK",
  "EBRACE",
  "ELSETOK",
  "WHILETOK",
  "DIGITS",
  "VAR",
  "HEXVALUE",
  "IPV4ADDR",
  "LBRACKET",
  "RBRACKET",
  "NOTTOK",
  "DEFTOK",
  "ARGS_DEF",
  "FUNCTOK",
  "COMMA",
  "BACKTICK",
  "DATA",
  "TYPETOK",
  "SETMODETOK",
  "SYMBOL",
  "GETMODETOK",
  "VARDECTOK",
  "VARDECAMT",
  "VARINCTOK",
  "VARINCAMT",
  "EQUAL",
  "QUOTE",
  "SINGLE_QUOTE",
  "$start",
  "commands",
  "variable_assignment",
  "truth_stmt",
  "if_stmt",
  "while_stmt",
  "command",
  "not_command",
  "quotedtext",
  "args",
  "type_cmd",
  "get_mode_cmd",
  "vardec_cmd",
  "set_mode_cmd",
  "varinc_cmd",
  "backtick_cmd",
  "call_func",
  "define_func" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'SecLang.y', 5)
  def _reduce_1(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 8)
  def _reduce_2(val, _values, result)
                 result = val[1] && val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 12)
  def _reduce_3(val, _values, result)
                 result = val[1] || val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 16)
  def _reduce_4(val, _values, result)
                 result = @s.var_add_var(val[1], val[4])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 20)
  def _reduce_5(val, _values, result)
                 result = @s.var_sub_var(val[1], val[4])
           
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'SecLang.y', 28)
  def _reduce_10(val, _values, result)
                 result = val[0] && val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 32)
  def _reduce_11(val, _values, result)
                 result = val[0] || val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 37)
  def _reduce_12(val, _values, result)
                 result = @s.is_match?(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 42)
  def _reduce_13(val, _values, result)
                 result = @s.is_eq?(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 47)
  def _reduce_14(val, _values, result)
                 result = @s.is_gt?(val[0],val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 52)
  def _reduce_15(val, _values, result)
                 result = @s.is_lt?(val[0],val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 57)
  def _reduce_16(val, _values, result)
                 result = @s.is_le?(val[0],val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 62)
  def _reduce_17(val, _values, result)
                 result = @s.is_ge?(val[0],val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 67)
  def _reduce_18(val, _values, result)
                 result = @s.is_ne?(val[0],val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 72)
  def _reduce_19(val, _values, result)
                 result = @s.var_add_var(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 77)
  def _reduce_20(val, _values, result)
                 result = @s.var_sub_var(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 82)
  def _reduce_21(val, _values, result)
                 result = @s.sec_puts(val[1])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 87)
  def _reduce_22(val, _values, result)
                 result = @s.sec_print(val[1])
           
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'SecLang.y', 95)
  def _reduce_24(val, _values, result)
    		result = @s.if_stmt(val[2], val[5], val[9])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 100)
  def _reduce_25(val, _values, result)
    		result = @s.if_stmt(val[2], val[5])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 107)
  def _reduce_26(val, _values, result)
                    @nested_stack.push @tokens
 		result = @s.while_stmt(val[2], val[5])
           
    result
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'SecLang.y', 119)
  def _reduce_29(val, _values, result)
    		result = StringVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 124)
  def _reduce_30(val, _values, result)
    		result = IntVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 129)
  def _reduce_31(val, _values, result)
                    result = @s.get_var(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 134)
  def _reduce_32(val, _values, result)
    		result = HexVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 139)
  def _reduce_33(val, _values, result)
    		result = IPv4Var.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 144)
  def _reduce_34(val, _values, result)
    		result = @s.slice_var(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 149)
  def _reduce_35(val, _values, result)
    		result = ArrayVar.new(val[1].flatten)
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 156)
  def _reduce_36(val, _values, result)
                      result = val[1] ? false : true
           
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

module_eval(<<'.,.,', 'SecLang.y', 181)
  def _reduce_45(val, _values, result)
    		result = @s.add_func(val[0], val[1], val[4])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 188)
  def _reduce_46(val, _values, result)
    		result = @s.call_func(val[0], val[1].flatten)
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 192)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 193)
  def _reduce_48(val, _values, result)
     result = [val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 194)
  def _reduce_49(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 200)
  def _reduce_50(val, _values, result)
    		result = @s.shell(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 207)
  def _reduce_51(val, _values, result)
    		result = @s.var_type(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 214)
  def _reduce_52(val, _values, result)
    		result = @s.var_set_mode(val[2], val[4])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 221)
  def _reduce_53(val, _values, result)
    		result = @s.var_get_mode(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 228)
  def _reduce_54(val, _values, result)
    		result = @s.var_dec(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 233)
  def _reduce_55(val, _values, result)
    		result = @s.var_dec(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 238)
  def _reduce_56(val, _values, result)
                 	result = @s.var_dec_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 245)
  def _reduce_57(val, _values, result)
    		result = @s.var_inc(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 255)
  def _reduce_58(val, _values, result)
                 	result = @s.var_inc_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 262)
  def _reduce_59(val, _values, result)
    		result = @s.add_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 269)
  def _reduce_60(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 273)
  def _reduce_61(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SecLang


