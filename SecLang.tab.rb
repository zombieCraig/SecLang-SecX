#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


# generated by racc

require 'strscan'
require './SecLangCore'

class SecLang < Racc::Parser

module_eval(<<'...end SecLang.y/module_eval...', 'SecLang.y', 263)
  def initialize
    @syntax_check = false
    @s = SecLangCore.new(self)
    @state = :MAIN
    @last_state = []
    @last_state.push @state
  end

  def clear_tokens
    @tokens = []
  end

  def check_syntax( str )
    @syntax_check = true
    res = parse(str)
    @syntax_check = false
    @tokens = []
    return res
  end

  def parse(str)
    @script = str
    @tokens = [] if not @tokens
    scanner = StringScanner.new(str)
    
    until scanner.eos?
      case
        when @state == :MAIN
          case
            when m = scanner.scan(/puts/)
              @tokens.push [:PUTSTOK, m]
            when m = scanner.scan(/print/)
              @tokens.push [:PRINTTOK, m]
            when m = scanner.scan(/type/)
              @tokens.push [:TYPETOK, m]
            when m = scanner.scan(/mode/)
              @tokens.push [:GETMODETOK, m]
            when m = scanner.scan(/set_mode/)
              @tokens.push [:SETMODETOK, m]
            when m = scanner.scan(/int/)
              @tokens.push [:INTTOK, m]
            when m = scanner.scan(/str/)
              @tokens.push [:STRTOK, m]
            when m = scanner.scan(/hex/)
              @tokens.push [:HEXTOK, m]
            when m = scanner.scan(/if/)
              @tokens.push [:IFTOK, m]
            when m = scanner.scan(/else/)
              @tokens.push [:ELSETOK, m]
            when m = scanner.scan(/{/)
              @tokens.push [:OBRACE, m]
              @last_state.push @state
              @state = :CODE_BLOCK
              @code_blocks = Array.new
              @code_segment = String.new
            when m = scanner.scan(/\(/)
              @tokens.push [:LPAREN, m]
            when m = scanner.scan(/\)/)
              @tokens.push [:RPAREN, m]
            when m = scanner.scan(/\"/)
              @tokens.push [:QUOTE, m]
              @last_state.push @state
              @state = :QUOTED 
            when m = scanner.scan(/\'/)
              @tokens.push [:SINGLE_QUOTE, m]
              @last_state.push @state
              @state = :SINGLE_QUOTED
            when m = scanner.scan(/\/\*/)
              @last_state.push @state
              @state = :BLOCK_COMMENT
            when m = scanner.scan(/,/)
              @tokens.push [:COMMA, m]
            when m = scanner.scan(/==/)
              @tokens.push [:EQ, m]
            when m = scanner.scan(/</)
              @tokens.push [:LT, m]
            when m = scanner.scan(/>/)
              @tokens.push [:GT, m]
            when m = scanner.scan(/>=/)
              @tokens.push [:GE, m]
            when m = scanner.scan(/<=/)
              @tokens.push [:LE, m]
            when m = scanner.scan(/!=/)
              @tokens.push [:NE, m]
            when m = scanner.scan(/\|\|/)
              @tokens.push [:ORTOK, m]
            when m = scanner.scan(/&&/)
              @tokens.push [:ANDTOK, m]
            when m = scanner.scan(/=/)
              @tokens.push [:EQUAL, m]
            when m = scanner.scan(/(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/)
              @tokens.push [:IPV4ADDR, m]
            when m = scanner.scan(/0x[0-9a-fA-F]+/)
              @tokens.push [:HEXVALUE, m]
            when m = scanner.scan(/\+=/)
              @tokens.push [:VARINCAMT, m]
            when m = scanner.scan(/-=/)
              @tokens.push [:VARDECAMT, m]
            when m = scanner.scan(/:[a-zA-Z][a-zA-Z0-9_-]*/)
              @tokens.push [:SYMBOL, m]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*\-\-/)
              @tokens.push [:VARDECTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*\+\+/)
              @tokens.push [:VARINCTOK, m ]
            when m = scanner.scan(/[a-zA-Z][a-zA-Z0-9_]*/)
              @tokens.push [:VAR, m]
            when m = scanner.scan(/\d+/)
              @tokens.push [:DIGITS, m]
            when m = scanner.scan(/\+/)
              @tokens.push [:ADD, m]
            when m = scanner.scan(/\-/)
              @tokens.push [:SUB, m]
            when m = scanner.scan(/\`/)
              @tokens.push [:BACKTICK, m]
              @last_state.push @state
              @state = :BACKTICKS
            when m = scanner.scan(/;/)
              @tokens.push [:SEMICOLON, m]
            when scanner.scan(/[ \t\r\n]/)
              # ignore whtiespace
            else
              puts "Syntax error around #{scanner.pos} #{scanner.rest}"
              return -1
          end
       when @state == :BLOCK_COMMENT
         case
           when m = scanner.skip_until(/\*\//)
             @state = @last_state.pop
           when m = scanner.scan(/./)
           when m = scanner.scan(/[\r\n]/)
             # ignore
         end
       when @state == :BACKTICKS
         case
           when m = scanner.scan(/\`/)
             @tokens.push [:BACKTICK, m]
             @state = @last_state.pop
           when m = scanner.scan(/[^`]+/)
             @tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when @state == :CODE_BLOCK
         case
            when m = scanner.scan(/}/)
              @state = @last_state.pop
              @code_blocks.push @code_segment
              @tokens.push [:BLOCK, @code_blocks]
              @tokens.push [:EBRACE, m]
            when m = scanner.scan(/./)
              @code_segment += m
            when m = scanner.scan(/[\r\n]/)
              @code_blocks.push @code_segment
              @code_segment = String.new
         end
       when @state == :QUOTED
         case
           when m = scanner.scan(/\"/)
             @tokens.push [:QUOTE, m]
             @state = @last_state.pop
           when m = scanner.scan(/[^"]+/)
             @tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end
       when @state == :SINGLE_QUOTED
         case
           when m = scanner.scan(/\'/)
             @tokens.push [:SINGLE_QUOTE, m]
             @state = @last_state.pop
           when m = scanner.scan(/[^']+/)
             @tokens.push [:DATA, m]
           when m = scanner.scan(/[ \t\r\n]/)
             # ignore whitespace
         end

       end
    end
    #@tokens.push [false, false]

    if @last_state.size > 1 and not 
       (@state == :BLOCK_COMMENT or @state == :CODE_BLOCK) then
      puts "Unclosed brackets (#{@last_state.pop.to_s})"
      return -1
    end

    # Only parse @tokens when back at MAIN
    if @last_state.size == 1 then
      @tokens.push [false, false]
#puts "DEBUG tokens=#{@tokens}"
      truth = yyparse(@tokens, :each)
      @tokens = []
    end
  end

  def on_error(error_token_id, error_value, value_stack)
    msg = "parse error "
    msg << "after #{value_stack.last} " if value_stack.length > 1
    msg << "on #{token_to_str(error_token_id)} #{error_value}"
    raise ParseError, msg
  end

...end SecLang.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    40,    41,    48,    49,    39,    42,    43,    44,    45,
    46,    47,    99,     6,     7,     8,    53,    67,    54,    12,
    13,    14,    15,    16,    26,    66,    27,    28,    29,    30,
    31,     2,    65,    32,    33,    53,    34,    54,    55,    35,
    36,    53,    86,    54,     6,     7,     8,    81,    82,    64,
    12,    13,    14,    15,    16,    26,    63,    27,    28,    29,
    30,    31,     2,    62,    32,    33,    90,    34,    91,    92,
    35,    36,    93,    94,    61,     6,     7,     8,    68,    60,
   100,    12,    13,    14,    15,    16,    26,   101,    27,    28,
    29,    30,    31,     2,   102,    32,    33,   103,    34,   104,
   105,    35,    36,    59,    58,    52,     6,     7,     8,    37,
   110,   111,    12,    13,    14,    15,    16,    26,   112,    27,
    28,    29,    30,    31,     2,   113,    32,    33,   114,    34,
   nil,   nil,    35,    36,   nil,   nil,   nil,     6,     7,     8,
   nil,   nil,   nil,    12,    13,    14,    15,    16,    26,   nil,
    27,    28,    29,    30,    31,     2,   nil,    32,    33,   nil,
    34,   nil,   nil,    35,    36,   nil,   nil,   nil,     6,     7,
     8,   nil,   nil,   nil,    12,    13,    14,    15,    16,    26,
   nil,    27,    28,    29,    30,    31,     2,   nil,    32,    33,
   nil,    34,   nil,   nil,    35,    36,   nil,   nil,   nil,     6,
     7,     8,   nil,   nil,   nil,    12,    13,    14,    15,    16,
    26,   nil,    27,    28,    29,    30,    31,     2,   nil,    32,
    33,   nil,    34,   nil,   nil,    35,    36,   nil,   nil,   nil,
     6,     7,     8,   nil,   nil,   nil,    12,    13,    14,    15,
    16,    26,   nil,    27,    28,    29,    30,    31,     2,   nil,
    32,    33,   nil,    34,   nil,   nil,    35,    36,   nil,   nil,
   nil,     6,     7,     8,   nil,   nil,   nil,    12,    13,    14,
    15,    16,    26,   nil,    27,    28,    29,    30,    31,     2,
   nil,    32,    33,   nil,    34,   nil,   nil,    35,    36,   nil,
   nil,   nil,     6,     7,     8,   nil,   nil,   nil,    12,    13,
    14,    15,    16,    26,   nil,    27,    28,    29,    30,    31,
     2,   nil,    32,    33,   nil,    34,   nil,   nil,    35,    36,
   nil,   nil,   nil,     6,     7,     8,   nil,   nil,   nil,    12,
    13,    14,    15,    16,    26,   nil,    27,    28,    29,    30,
    31,     2,   nil,    32,    33,   nil,    34,   nil,   nil,    35,
    36,   nil,   nil,   nil,     6,     7,     8,   nil,   nil,   nil,
    12,    13,    14,    15,    16,    26,   nil,    27,    28,    29,
    30,    31,     2,   nil,    32,    33,   nil,    34,   nil,   nil,
    35,    36,   nil,   nil,   nil,     6,     7,     8,   nil,   nil,
   nil,    12,    13,    14,    15,    16,    26,   nil,    27,    28,
    29,    30,    31,     2,   nil,    32,    33,   nil,    34,   nil,
   nil,    35,    36,   nil,   nil,   nil,     6,     7,     8,   nil,
   nil,   nil,    12,    13,    14,    15,    16,    26,   nil,    27,
    28,    29,    30,    31,     2,   nil,    32,    33,   nil,    34,
   nil,   nil,    35,    36,   nil,   nil,   nil,     6,     7,     8,
   nil,   nil,   nil,    12,    13,    14,    15,    16,    26,   nil,
    27,    28,    29,    30,    31,     2,   nil,    32,    33,   nil,
    34,   nil,   nil,    35,    36,   nil,   nil,   nil,     6,     7,
     8,   nil,   nil,   nil,    12,    13,    14,    15,    16,    26,
   nil,    27,    28,    29,    30,    31,     2,   nil,    32,    33,
   nil,    34,   nil,   nil,    35,    36,   nil,   nil,   nil,     6,
     7,     8,   nil,   nil,   nil,    12,    13,    14,    15,    16,
    26,   nil,    27,    28,    29,    30,    31,     2,   nil,    32,
    33,   nil,    34,   nil,   nil,    35,    36,   nil,   nil,   nil,
     6,     7,     8,   nil,   nil,   nil,    12,    13,    14,    15,
    16,    26,   nil,    27,    28,    29,    30,    31,     2,   nil,
    32,    33,   nil,    34,   nil,   nil,    35,    36,   nil,   nil,
   nil,     6,     7,     8,   nil,   nil,   nil,    12,    13,    14,
    15,    16,    26,   nil,    27,    28,    29,    30,    31,     2,
   nil,    32,    33,   nil,    34,   nil,   nil,    35,    36,   nil,
   nil,   nil,     6,     7,     8,   nil,   nil,   nil,    12,    13,
    14,    15,    16,    26,   nil,    27,    28,    29,    30,    31,
     2,   nil,    32,    33,   nil,    34,   nil,   nil,    35,    36,
   nil,   nil,   nil,     6,     7,     8,   nil,   nil,   nil,    12,
    13,    14,    15,    16,    26,   nil,    27,    28,    29,    30,
    31,   nil,   nil,    32,    33,   nil,    34,   nil,   nil,    35,
    36,    12,    83,    14,    15,    16,    26,   nil,    27,    28,
    29,    30,    31,   nil,   nil,    32,    33,   nil,    34,   nil,
   nil,    35,    36,    12,    83,    14,    15,    16,    26,   nil,
    27,    28,    29,    30,    31,   nil,   nil,    32,    33,   nil,
    34,   nil,   nil,    35,    36,    12,    83,    14,    15,    16,
    26,   nil,    27,    28,    29,    30,    31,   nil,   nil,    32,
    33,   nil,    34,   nil,   nil,    35,    36,    12,    83,    14,
    15,    16,    26,   nil,    27,    28,    29,    30,    31,   nil,
   nil,    32,    33,   nil,    34,    57,   nil,    35,    36,    26,
   nil,    27,    28,    29,    30,    31,   nil,   nil,    32,    33,
   nil,    34,    95,    96,    97,    98 ]

racc_action_check = [
     0,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,    80,     0,     0,     0,    83,    37,    83,     0,
     0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
     0,    98,    35,     0,     0,    13,     0,    13,    13,     0,
     0,    57,    58,    57,    98,    98,    98,    53,    53,    32,
    98,    98,    98,    98,    98,    98,    31,    98,    98,    98,
    98,    98,     2,    30,    98,    98,    62,    98,    63,    64,
    98,    98,    65,    66,    29,     2,     2,     2,    38,    28,
    87,     2,     2,     2,     2,     2,     2,    88,     2,     2,
     2,     2,     2,    49,    89,     2,     2,    90,     2,    91,
    92,     2,     2,    27,    26,     8,    49,    49,    49,     1,
    99,   104,    49,    49,    49,    49,    49,    49,   110,    49,
    49,    49,    49,    49,     6,   111,    49,    49,   112,    49,
   nil,   nil,    49,    49,   nil,   nil,   nil,     6,     6,     6,
   nil,   nil,   nil,     6,     6,     6,     6,     6,     6,   nil,
     6,     6,     6,     6,     6,     7,   nil,     6,     6,   nil,
     6,   nil,   nil,     6,     6,   nil,   nil,   nil,     7,     7,
     7,   nil,   nil,   nil,     7,     7,     7,     7,     7,     7,
   nil,     7,     7,     7,     7,     7,    97,   nil,     7,     7,
   nil,     7,   nil,   nil,     7,     7,   nil,   nil,   nil,    97,
    97,    97,   nil,   nil,   nil,    97,    97,    97,    97,    97,
    97,   nil,    97,    97,    97,    97,    97,    48,   nil,    97,
    97,   nil,    97,   nil,   nil,    97,    97,   nil,   nil,   nil,
    48,    48,    48,   nil,   nil,   nil,    48,    48,    48,    48,
    48,    48,   nil,    48,    48,    48,    48,    48,    47,   nil,
    48,    48,   nil,    48,   nil,   nil,    48,    48,   nil,   nil,
   nil,    47,    47,    47,   nil,   nil,   nil,    47,    47,    47,
    47,    47,    47,   nil,    47,    47,    47,    47,    47,    96,
   nil,    47,    47,   nil,    47,   nil,   nil,    47,    47,   nil,
   nil,   nil,    96,    96,    96,   nil,   nil,   nil,    96,    96,
    96,    96,    96,    96,   nil,    96,    96,    96,    96,    96,
    95,   nil,    96,    96,   nil,    96,   nil,   nil,    96,    96,
   nil,   nil,   nil,    95,    95,    95,   nil,   nil,   nil,    95,
    95,    95,    95,    95,    95,   nil,    95,    95,    95,    95,
    95,    46,   nil,    95,    95,   nil,    95,   nil,   nil,    95,
    95,   nil,   nil,   nil,    46,    46,    46,   nil,   nil,   nil,
    46,    46,    46,    46,    46,    46,   nil,    46,    46,    46,
    46,    46,    45,   nil,    46,    46,   nil,    46,   nil,   nil,
    46,    46,   nil,   nil,   nil,    45,    45,    45,   nil,   nil,
   nil,    45,    45,    45,    45,    45,    45,   nil,    45,    45,
    45,    45,    45,    44,   nil,    45,    45,   nil,    45,   nil,
   nil,    45,    45,   nil,   nil,   nil,    44,    44,    44,   nil,
   nil,   nil,    44,    44,    44,    44,    44,    44,   nil,    44,
    44,    44,    44,    44,    43,   nil,    44,    44,   nil,    44,
   nil,   nil,    44,    44,   nil,   nil,   nil,    43,    43,    43,
   nil,   nil,   nil,    43,    43,    43,    43,    43,    43,   nil,
    43,    43,    43,    43,    43,    42,   nil,    43,    43,   nil,
    43,   nil,   nil,    43,    43,   nil,   nil,   nil,    42,    42,
    42,   nil,   nil,   nil,    42,    42,    42,    42,    42,    42,
   nil,    42,    42,    42,    42,    42,    39,   nil,    42,    42,
   nil,    42,   nil,   nil,    42,    42,   nil,   nil,   nil,    39,
    39,    39,   nil,   nil,   nil,    39,    39,    39,    39,    39,
    39,   nil,    39,    39,    39,    39,    39,    55,   nil,    39,
    39,   nil,    39,   nil,   nil,    39,    39,   nil,   nil,   nil,
    55,    55,    55,   nil,   nil,   nil,    55,    55,    55,    55,
    55,    55,   nil,    55,    55,    55,    55,    55,    41,   nil,
    55,    55,   nil,    55,   nil,   nil,    55,    55,   nil,   nil,
   nil,    41,    41,    41,   nil,   nil,   nil,    41,    41,    41,
    41,    41,    41,   nil,    41,    41,    41,    41,    41,    40,
   nil,    41,    41,   nil,    41,   nil,   nil,    41,    41,   nil,
   nil,   nil,    40,    40,    40,   nil,   nil,   nil,    40,    40,
    40,    40,    40,    40,   nil,    40,    40,    40,    40,    40,
    52,   nil,    40,    40,   nil,    40,   nil,   nil,    40,    40,
   nil,   nil,   nil,    52,    52,    52,   nil,   nil,   nil,    52,
    52,    52,    52,    52,    52,   nil,    52,    52,    52,    52,
    52,   nil,   nil,    52,    52,   nil,    52,   nil,   nil,    52,
    52,    61,    61,    61,    61,    61,    61,   nil,    61,    61,
    61,    61,    61,   nil,   nil,    61,    61,   nil,    61,   nil,
   nil,    61,    61,    54,    54,    54,    54,    54,    54,   nil,
    54,    54,    54,    54,    54,   nil,   nil,    54,    54,   nil,
    54,   nil,   nil,    54,    54,    59,    59,    59,    59,    59,
    59,   nil,    59,    59,    59,    59,    59,   nil,   nil,    59,
    59,   nil,    59,   nil,   nil,    59,    59,    60,    60,    60,
    60,    60,    60,   nil,    60,    60,    60,    60,    60,   nil,
   nil,    60,    60,   nil,    60,    16,   nil,    60,    60,    16,
   nil,    16,    16,    16,    16,    16,   nil,   nil,    16,    16,
   nil,    16,    68,    68,    68,    68 ]

racc_action_pointer = [
    -2,   109,    60,   nil,    -3,   nil,   122,   153,   103,   nil,
   nil,   nil,   nil,    -2,   nil,   nil,   723,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,   101,    77,    72,
    61,    54,    47,   nil,   nil,     5,    -2,    17,    75,   494,
   587,   556,   463,   432,   401,   370,   339,   246,   215,    91,
   nil,   nil,   618,    26,   662,   525,   nil,     4,    16,   684,
   706,   640,    44,    46,    47,    31,    31,   nil,   758,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   -21,   nil,   nil,   nil,    77,    84,    91,
    94,    66,    97,   nil,   nil,   308,   277,   184,    29,    92,
   nil,   nil,   nil,   nil,    77,   nil,   nil,   nil,   nil,   nil,
    99,   122,   108,   nil,   nil ]

racc_action_default = [
    -1,   -55,    -1,    -6,   -21,    -8,    -1,    -1,   -55,   -23,
   -24,   -25,   -26,   -27,   -28,   -29,   -55,   -31,   -32,   -33,
   -34,   -35,   -36,   -37,   -38,   -39,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -47,   -50,   -55,   -55,   -55,   -55,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -19,   -20,    -1,   -55,   -55,    -1,   -30,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,   -55,   -55,   115,   -55,    -7,
    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,
   -55,   -48,   -49,   -27,   -51,   -52,   -40,   -55,   -55,   -55,
   -55,   -55,   -55,   -53,   -54,    -1,    -1,    -1,    -1,   -55,
   -41,   -42,   -43,   -44,   -55,   -46,    -2,    -3,    -4,    -5,
   -55,   -55,   -55,   -45,   -22 ]

racc_goto_table = [
     1,    56,    38,    84,   nil,   nil,    50,    51,    87,    88,
    89,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
   nil,   nil,    80,   nil,   nil,    85,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   106,   107,   108,   109 ]

racc_goto_check = [
     1,     5,     1,     3,   nil,   nil,     1,     1,     3,     3,
     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   nil,   nil,     1,   nil,   nil,     1,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     1,     1,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   -51,   nil,   -15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     3,     4,     5,     9,    10,    11,    17,    18,
    19,    20,    21,    22,    23,    24,    25 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 44, :_reduce_1,
  5, 44, :_reduce_2,
  5, 44, :_reduce_3,
  5, 44, :_reduce_4,
  5, 44, :_reduce_5,
  1, 44, :_reduce_none,
  3, 44, :_reduce_none,
  1, 44, :_reduce_none,
  3, 44, :_reduce_9,
  3, 44, :_reduce_10,
  3, 44, :_reduce_11,
  3, 44, :_reduce_12,
  3, 44, :_reduce_13,
  3, 44, :_reduce_14,
  3, 44, :_reduce_15,
  3, 44, :_reduce_16,
  3, 44, :_reduce_17,
  3, 44, :_reduce_18,
  2, 44, :_reduce_19,
  2, 44, :_reduce_20,
  1, 44, :_reduce_none,
  7, 47, :_reduce_22,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_25,
  1, 46, :_reduce_26,
  1, 46, :_reduce_27,
  1, 46, :_reduce_28,
  1, 46, :_reduce_29,
  2, 49, :_reduce_30,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  3, 59, :_reduce_40,
  4, 56, :_reduce_41,
  4, 54, :_reduce_42,
  4, 55, :_reduce_43,
  4, 51, :_reduce_44,
  6, 53, :_reduce_45,
  4, 52, :_reduce_46,
  1, 57, :_reduce_47,
  3, 57, :_reduce_48,
  3, 57, :_reduce_49,
  1, 58, :_reduce_50,
  3, 58, :_reduce_51,
  3, 45, :_reduce_52,
  3, 50, :_reduce_53,
  3, 50, :_reduce_54 ]

racc_reduce_n = 55

racc_shift_n = 115

racc_token_table = {
  false => 0,
  :error => 1,
  :LPAREN => 2,
  :RPAREN => 3,
  :ANDTOK => 4,
  :ORTOK => 5,
  :ADD => 6,
  :SUB => 7,
  :SEMICOLON => 8,
  :EQ => 9,
  :GT => 10,
  :LT => 11,
  :LE => 12,
  :GE => 13,
  :NE => 14,
  :PUTSTOK => 15,
  :PRINTTOK => 16,
  :IFTOK => 17,
  :OBRACE => 18,
  :BLOCK => 19,
  :EBRACE => 20,
  :DIGITS => 21,
  :VAR => 22,
  :HEXVALUE => 23,
  :IPV4ADDR => 24,
  :NOTTOK => 25,
  :BACKTICK => 26,
  :DATA => 27,
  :STRTOK => 28,
  :INTTOK => 29,
  :HEXTOK => 30,
  :TYPETOK => 31,
  :SETMODETOK => 32,
  :COMMA => 33,
  :SYMBOL => 34,
  :GETMODETOK => 35,
  :VARDECTOK => 36,
  :VARDECAMT => 37,
  :VARINCTOK => 38,
  :VARINCAMT => 39,
  :EQUAL => 40,
  :QUOTE => 41,
  :SINGLE_QUOTE => 42 }

racc_nt_base = 43

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LPAREN",
  "RPAREN",
  "ANDTOK",
  "ORTOK",
  "ADD",
  "SUB",
  "SEMICOLON",
  "EQ",
  "GT",
  "LT",
  "LE",
  "GE",
  "NE",
  "PUTSTOK",
  "PRINTTOK",
  "IFTOK",
  "OBRACE",
  "BLOCK",
  "EBRACE",
  "DIGITS",
  "VAR",
  "HEXVALUE",
  "IPV4ADDR",
  "NOTTOK",
  "BACKTICK",
  "DATA",
  "STRTOK",
  "INTTOK",
  "HEXTOK",
  "TYPETOK",
  "SETMODETOK",
  "COMMA",
  "SYMBOL",
  "GETMODETOK",
  "VARDECTOK",
  "VARDECAMT",
  "VARINCTOK",
  "VARINCAMT",
  "EQUAL",
  "QUOTE",
  "SINGLE_QUOTE",
  "$start",
  "commands",
  "variable_assignment",
  "truth_stmt",
  "if_stmt",
  "command",
  "not_command",
  "quotedtext",
  "type_cmd",
  "get_mode_cmd",
  "set_mode_cmd",
  "int_cmd",
  "hex_cmd",
  "str_cmd",
  "vardec_cmd",
  "varinc_cmd",
  "backtick_cmd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'SecLang.y', 5)
  def _reduce_1(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 8)
  def _reduce_2(val, _values, result)
                 result = val[1] && val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 12)
  def _reduce_3(val, _values, result)
                 result = val[1] || val[4]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 16)
  def _reduce_4(val, _values, result)
                 result = @s.var_add_var(val[1], val[4])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 20)
  def _reduce_5(val, _values, result)
                 result = @s.var_sub_var(val[1], val[4])
           
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'SecLang.y', 27)
  def _reduce_9(val, _values, result)
                 result = val[0] && val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 31)
  def _reduce_10(val, _values, result)
                 result = val[0] || val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 36)
  def _reduce_11(val, _values, result)
                 result = @s.is_eq?(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 41)
  def _reduce_12(val, _values, result)
                 result = val[0] > val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 46)
  def _reduce_13(val, _values, result)
                 result = val[0] < val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 51)
  def _reduce_14(val, _values, result)
                 result = val[0] <= val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 56)
  def _reduce_15(val, _values, result)
                 result = val[0] >= val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 61)
  def _reduce_16(val, _values, result)
                 result = val[0] != val[2]
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 66)
  def _reduce_17(val, _values, result)
                 result = @s.var_add_var(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 71)
  def _reduce_18(val, _values, result)
                 result = @s.var_sub_var(val[0], val[2])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 76)
  def _reduce_19(val, _values, result)
                 result = @s.sec_puts(val[1])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 81)
  def _reduce_20(val, _values, result)
                 result = @s.sec_print(val[1])
           
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'SecLang.y', 89)
  def _reduce_22(val, _values, result)
    		result = @s.if_stmt(val[2], val[5])
           
    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'SecLang.y', 100)
  def _reduce_25(val, _values, result)
    		result = StringVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 105)
  def _reduce_26(val, _values, result)
    		result = IntVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 110)
  def _reduce_27(val, _values, result)
                    result = @s.get_var(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 115)
  def _reduce_28(val, _values, result)
    		result = HexVar.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 120)
  def _reduce_29(val, _values, result)
    		result = IPv4Var.new(val[0])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 127)
  def _reduce_30(val, _values, result)
                      result = val[1] ? false : true
           
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

module_eval(<<'.,.,', 'SecLang.y', 154)
  def _reduce_40(val, _values, result)
    		result = @s.shell(val[1])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 161)
  def _reduce_41(val, _values, result)
    		result = @s.str(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 168)
  def _reduce_42(val, _values, result)
    		result = @s.int(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 175)
  def _reduce_43(val, _values, result)
    		result = @s.hex(val[2])
         
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 182)
  def _reduce_44(val, _values, result)
    		result = @s.var_type(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 189)
  def _reduce_45(val, _values, result)
    		result = @s.var_set_mode(val[2], val[4])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 196)
  def _reduce_46(val, _values, result)
    		result = @s.var_get_mode(val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 203)
  def _reduce_47(val, _values, result)
    		result = @s.var_dec(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 208)
  def _reduce_48(val, _values, result)
    		result = @s.var_dec(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 213)
  def _reduce_49(val, _values, result)
                 	result = @s.var_dec_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 220)
  def _reduce_50(val, _values, result)
    		result = @s.var_inc(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 230)
  def _reduce_51(val, _values, result)
                 	result = @s.var_inc_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 237)
  def _reduce_52(val, _values, result)
    		result = @s.add_var(val[0], val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 244)
  def _reduce_53(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

module_eval(<<'.,.,', 'SecLang.y', 248)
  def _reduce_54(val, _values, result)
    		result = val[1]
         
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SecLang


