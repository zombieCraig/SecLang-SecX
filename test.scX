/* SecLang test Script
 * Runs a series of test
 * Written in SecLang
 */
puts "SecLang test scripts"
puts "--------------------"
test_cnt = 1
puts "Initial print test " + str(test_cnt) + ".\n\n"

print "Enabling full color..."
color("full")
puts "Enabled"

/* Initialize all of vars */
test = "a = 3"
a = 3
if(a == 3) {
  pass(test)
} else {
  fail(test)
}
test = "b = 0x90"
b = 0x90
if(b == 0x90) {
  pass(test)
} else {
  fail(test)
}
test = 'c = "Test"'
c = "Test"
if(c == "Test") {
  pass(test)
} else {
  fail(test)
}
test = "d = 10.10.10.10"
d = 10.10.10.10
if(d == 10.10.10.10) {
  pass(test)
} else {
  fail(test)
}
test = "e = 3.14"
e = 3.14
if(e == 3.14) {
  pass(test)
} else {
  fail(test)
}

test_cnt++
puts "Starting test #" + str(test_cnt) + "\n\n"
print "a + b = "
r = a + b
puts r 
if( r == 147) {
  pass("result is 147")
} else {
  fail("Result is not 147, $r")
}
print "b + a = "
r = b + a
puts r
if(r == 0x93) {
  pass("result is 0x93")
} else {
  fail("result is not 0x93, $r")
}
print "a + c = "
r = a + c
puts r
if(r == 3) { pass("result is 3") } else { fail("result is not 3, $r") }
print "c + a = "
r = c + a
puts r
if(r == "Tesw") { pass("result is 'Tesw'") } else { fail("result is not 'Tesw', $r") }
print "d + a = "
r = d + a
puts r
if(r == 10.10.10.13) { pass("result is 10.10.10.13") } else { fail("result is not 10.10.10.13, $r") }
print "a + d = "
r = a + d
puts r
if(r == 3) { pass("result is 3") } else { fail("result is not 3, $r") }
print "d + b = "
r = d + b
puts r
if(r == 10.10.10.154) { pass("result is 10.10.10.154") } else { fail("result is not 10.10.10.154, $r") }
puts "result+=200"
r+=200
puts r
if(r == 10.10.11.99) { pass("result is 10.10.11.99") } else { fail("result is not 10.10.11.99, $r") }
print "a + e = "
r = a + e
puts r
print "e + a = "
r = e + a
puts r
print "b + e = "
r = b + e
puts r
print "c + e = "
r = c + e
puts r
print "d + e = "
r = d + e
puts r
print "e + e = "
r = e + e
puts r


test_cnt++
puts "\nTest #" + str(test_cnt)
puts "String command + IP"
cmd = "ping -c 1 "
cmd += 172.16.17.1
puts "Command: " + cmd
puts "Testing command..."
r = `$cmd`
puts "Result:"
puts r

test_cnt++
puts "\nTest #$test_cnt (IF/ELSE)"
puts "if (a == b) { puts 'Match' }"
if (a == b) { puts "Match" }
puts "if (a == 3) { puts 'Match' }"
if (a == 3) { puts "Match" }
puts "Multiline IF code block"
if (a == 3) {
  puts "This comes from a multi-line code-block"
  puts "a ($a) == 3 was true"
}
puts "Else test"
puts "testing if a ($a) == 8 was true"
if (a == 8) {
  puts "This comes from a multi-line code-block"
} else {
  puts "a was not == 8"
}

test_cnt++
puts "\nWhile tests #$test_cnt"
puts "while (a < 8)"
while (a < 8) {
  puts " a=$a"
  a++
}
if(a != 8) {
  puts "Error: a should be 8"
}

target = 10.10.10.250
print "Scanning IPs..."
while(target >= 10.10.11.4) {
  print "."
  target++
}
puts "Target found $target"
if (target != 10.10.11.5) {
  puts "Error: target should be 10.10.11.5"
}

test_cnt++
puts "Test #$test_cnt : Custom functions"
puts "Create leet(str) function"
def leet(test) {
  puts test
}
puts "Use leet to print a string"
leet("Hi from leet function")

def incAmt(obj, amt) {
  while( obj != amt) {
    puts obj
    obj++
  }
}

obj1 = 10.10.10.10
incAmt(obj1, 10.10.11.10)

test_cnt++
puts "Test #$test_cnt: Arrays"
arr = [ 30, 10.10.10.10, "Hello", 0x50 ]
puts "Array: $arr"
array_length = len(arr)
puts "Array Length: $array_length"
puts arr + 0x30
puts arr + "Bye"
puts arr+= 10.30.40.89
puts arr

